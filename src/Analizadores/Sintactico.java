
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Arbol.*;
import Expresiones.*;
import Instrucciones.*;
import Instrucciones.Condicionales.*;
import Instrucciones.Ciclos.*;
import Expresiones.Operaciones.*;
import CambioFlujo.*;
import FuncionesNativas.*;
import Excepciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\010" +
    "\004\000\002\010\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\007\000\002\006\007\000\002\006\011\000" +
    "\002\006\003\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\004\006\000" +
    "\002\004\007\000\002\003\007\000\002\003\005\000\002" +
    "\003\006\000\002\003\012\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\012\005\000\002\012\003\000\002\013\004\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\005\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\007\000\002\021\011\000\002\021\015\000\002\021\012" +
    "\000\002\021\016\000\002\026\013\000\002\026\012\000" +
    "\002\022\011\000\002\027\004\000\002\027\003\000\002" +
    "\030\006\000\002\030\005\000\002\023\013\000\002\024" +
    "\014\000\002\024\014\000\002\007\003\000\002\007\003" +
    "\000\002\015\006\000\002\025\011\000\002\016\006\000" +
    "\002\016\006\000\002\016\006\000\002\016\006\000\002" +
    "\016\006\000\002\016\006\000\002\017\010\000\002\005" +
    "\005\000\002\032\005\000\002\032\004\000\002\031\006" +
    "\000\002\031\005\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\046\004\004\005\007\006\012\007\035\010" +
    "\011\027\021\054\026\062\040\063\024\064\027\066\006" +
    "\067\034\070\037\071\041\074\031\075\032\076\010\100" +
    "\022\001\002\000\006\025\uffe6\054\uffe6\001\002\000\056" +
    "\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\027" +
    "\ufffe\030\ufffe\054\ufffe\062\ufffe\063\ufffe\064\ufffe\066\ufffe" +
    "\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\100\ufffe\001\002\000\004\014\u0106\001\002" +
    "\000\006\025\uffe5\054\uffe5\001\002\000\004\022\u0102\001" +
    "\002\000\006\025\uffe2\054\uffe2\001\002\000\006\025\uffe4" +
    "\054\uffe4\001\002\000\004\002\u0101\001\002\000\056\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\027\ufffd" +
    "\030\ufffd\054\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\100\ufffd\001\002\000\050\002\000\004\004\005" +
    "\007\006\012\007\035\010\011\027\021\054\026\062\040" +
    "\063\024\064\027\066\006\067\034\070\037\071\041\074" +
    "\031\075\032\076\010\100\022\001\002\000\056\002\ufff1" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\027\ufff1\030" +
    "\ufff1\054\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076" +
    "\ufff1\100\ufff1\001\002\000\056\002\ufff8\004\ufff8\005\ufff8" +
    "\006\ufff8\007\ufff8\010\ufff8\027\ufff8\030\ufff8\054\ufff8\062" +
    "\ufff8\063\ufff8\064\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\075\ufff8\076\ufff8\100\ufff8\001" +
    "\002\000\056\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\027\uffed\030\uffed\054\uffed\062\uffed\063\uffed\064" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\076\uffed\100\uffed\001\002\000\046\004" +
    "\004\005\007\006\012\007\035\010\011\027\021\054\026" +
    "\062\040\063\024\064\027\066\006\067\034\070\037\071" +
    "\041\074\031\075\032\076\010\100\022\001\002\000\004" +
    "\022\371\001\002\000\056\002\ufffc\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\027\ufffc\030\ufffc\054\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc\072" +
    "\ufffc\073\ufffc\074\ufffc\075\ufffc\076\ufffc\100\ufffc\001\002" +
    "\000\004\022\363\001\002\000\056\002\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\027\ufff0\030\ufff0\054\ufff0" +
    "\062\ufff0\063\ufff0\064\ufff0\066\ufff0\067\ufff0\070\ufff0\071" +
    "\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100\ufff0" +
    "\001\002\000\012\013\270\025\155\033\357\034\360\001" +
    "\002\000\004\022\322\001\002\000\056\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\027\uffee\030\uffee\054" +
    "\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee\070\uffee" +
    "\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee\100" +
    "\uffee\001\002\000\004\027\312\001\002\000\004\022\255" +
    "\001\002\000\004\054\233\001\002\000\004\014\231\001" +
    "\002\000\006\025\uffe3\054\uffe3\001\002\000\056\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\027\uffef\030" +
    "\uffef\054\uffef\062\uffef\063\uffef\064\uffef\066\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\100\uffef\001\002\000\050\011\055\012\045\014\227" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\004\022\222\001" +
    "\002\000\004\022\042\001\002\000\046\011\055\012\045" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\004\054\221\001" +
    "\002\000\052\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\023\uffcc\026\uffcc\031\uffcc\032\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\046\uffcc\106\uffcc\001\002\000\052\014\uffc9\015\uffc9\016" +
    "\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9\026\uffc9\031\uffc9" +
    "\032\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\044\uffc9\046\uffc9\106\uffc9\001\002\000\052" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023" +
    "\uffcd\026\uffcd\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\106" +
    "\uffcd\001\002\000\004\022\216\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\004\022" +
    "\210\001\002\000\004\054\207\001\002\000\052\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\023\uffce\026" +
    "\uffce\031\uffce\032\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce\106\uffce\001" +
    "\002\000\052\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0" +
    "\021\uffc0\023\uffc0\026\uffc0\031\uffc0\032\uffc0\035\uffc0\036" +
    "\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\046\uffc0\106\uffc0\001\002\000\052\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\020\uffca\021\uffca\023\uffca\026\uffca\031\uffca" +
    "\032\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\043\uffca\044\uffca\046\uffca\106\uffca\001\002\000\052" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023" +
    "\uffc1\026\uffc1\031\uffc1\032\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1\106" +
    "\uffc1\001\002\000\052\014\uffcb\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\023\uffcb\026\uffcb\031\uffcb\032\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\046\uffcb\106\uffcb\001\002\000\042\016\115\017" +
    "\106\020\111\021\077\023\171\032\076\035\113\036\114" +
    "\037\104\040\107\041\101\042\103\043\105\044\102\046" +
    "\110\106\100\001\002\000\046\011\055\012\045\017\061" +
    "\022\070\033\052\034\043\045\050\054\063\055\053\056" +
    "\046\057\057\060\044\077\065\101\064\102\062\103\047" +
    "\104\067\105\051\001\002\000\004\022\165\001\002\000" +
    "\060\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\023\uffcf\025\155\026\uffcf\031\uffcf\032\uffcf\033\156\034" +
    "\157\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\106\uffcf\001\002\000\004\022" +
    "\151\001\002\000\004\022\146\001\002\000\052\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\026" +
    "\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\106\uffc2\001" +
    "\002\000\004\022\143\001\002\000\052\004\073\006\074" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\052\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8" +
    "\023\uffc8\026\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8" +
    "\106\uffc8\001\002\000\052\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\023\uffbf\026\uffbf\031\uffbf\032\uffbf" +
    "\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043" +
    "\uffbf\044\uffbf\046\uffbf\106\uffbf\001\002\000\004\023\141" +
    "\001\002\000\004\023\137\001\002\000\042\016\115\017" +
    "\106\020\111\021\077\023\112\032\076\035\113\036\114" +
    "\037\104\040\107\041\101\042\103\043\105\044\102\046" +
    "\110\106\100\001\002\000\046\011\055\012\045\017\061" +
    "\022\070\033\052\034\043\045\050\054\063\055\053\056" +
    "\046\057\057\060\044\077\065\101\064\102\062\103\047" +
    "\104\067\105\051\001\002\000\046\011\055\012\045\017" +
    "\061\022\070\033\052\034\043\045\050\054\063\055\053" +
    "\056\046\057\057\060\044\077\065\101\064\102\062\103" +
    "\047\104\067\105\051\001\002\000\046\011\055\012\045" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\046\011\055\012" +
    "\045\017\061\022\070\033\052\034\043\045\050\054\063" +
    "\055\053\056\046\057\057\060\044\077\065\101\064\102" +
    "\062\103\047\104\067\105\051\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\046\011" +
    "\055\012\045\017\061\022\070\033\052\034\043\045\050" +
    "\054\063\055\053\056\046\057\057\060\044\077\065\101" +
    "\064\102\062\103\047\104\067\105\051\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\046\011\055\012\045\017\061\022\070\033\052\034\043" +
    "\045\050\054\063\055\053\056\046\057\057\060\044\077" +
    "\065\101\064\102\062\103\047\104\067\105\051\001\002" +
    "\000\046\011\055\012\045\017\061\022\070\033\052\034" +
    "\043\045\050\054\063\055\053\056\046\057\057\060\044" +
    "\077\065\101\064\102\062\103\047\104\067\105\051\001" +
    "\002\000\046\011\055\012\045\017\061\022\070\033\052" +
    "\034\043\045\050\054\063\055\053\056\046\057\057\060" +
    "\044\077\065\101\064\102\062\103\047\104\067\105\051" +
    "\001\002\000\046\011\055\012\045\017\061\022\070\033" +
    "\052\034\043\045\050\054\063\055\053\056\046\057\057" +
    "\060\044\077\065\101\064\102\062\103\047\104\067\105" +
    "\051\001\002\000\046\011\055\012\045\017\061\022\070" +
    "\033\052\034\043\045\050\054\063\055\053\056\046\057" +
    "\057\060\044\077\065\101\064\102\062\103\047\104\067" +
    "\105\051\001\002\000\052\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\023\uffc7\026\uffc7\031\uffc7\032\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\046\uffc7\106\uffc7\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\046\011" +
    "\055\012\045\017\061\022\070\033\052\034\043\045\050" +
    "\054\063\055\053\056\046\057\057\060\044\077\065\101" +
    "\064\102\062\103\047\104\067\105\051\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\052\014\uffde\015\uffde\016\uffde\017\uffde\020\111\021\077" +
    "\023\uffde\026\uffde\031\uffde\032\uffde\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde" +
    "\106\100\001\002\000\052\014\uffd8\015\uffd8\016\115\017" +
    "\106\020\111\021\077\023\uffd8\026\uffd8\031\uffd8\032\uffd8" +
    "\035\113\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\103\043" +
    "\uffd8\044\uffd8\046\uffd8\106\100\001\002\000\052\014\uffd5" +
    "\015\uffd5\016\115\017\106\020\111\021\077\023\uffd5\026" +
    "\uffd5\031\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5\106\100\001" +
    "\002\000\052\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\026\uffdc\031\uffdc\032\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\046\uffdc\106\100\001\002\000\042\016\115\017\106\020" +
    "\111\021\077\031\123\032\076\035\113\036\114\037\104" +
    "\040\107\041\101\042\103\043\105\044\102\046\110\106" +
    "\100\001\002\000\046\011\055\012\045\017\061\022\070" +
    "\033\052\034\043\045\050\054\063\055\053\056\046\057" +
    "\057\060\044\077\065\101\064\102\062\103\047\104\067" +
    "\105\051\001\002\000\052\014\uffbe\015\uffbe\016\115\017" +
    "\106\020\111\021\077\023\uffbe\026\uffbe\031\uffbe\032\076" +
    "\035\113\036\114\037\104\040\107\041\101\042\103\043" +
    "\105\044\102\046\110\106\100\001\002\000\052\014\uffd7" +
    "\015\uffd7\016\115\017\106\020\111\021\077\023\uffd7\026" +
    "\uffd7\031\uffd7\032\uffd7\035\113\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\103\043\uffd7\044\uffd7\046\uffd7\106\100\001" +
    "\002\000\052\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\111" +
    "\021\077\023\uffdd\026\uffdd\031\uffdd\032\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\046\uffdd\106\100\001\002\000\052\014\uffd3\015\uffd3\016" +
    "\115\017\106\020\111\021\077\023\uffd3\026\uffd3\031\uffd3" +
    "\032\076\035\113\036\114\037\104\040\107\041\101\042" +
    "\103\043\uffd3\044\uffd3\046\uffd3\106\100\001\002\000\052" +
    "\014\uffd9\015\uffd9\016\115\017\106\020\111\021\077\023" +
    "\uffd9\026\uffd9\031\uffd9\032\uffd9\035\113\036\uffd9\037\uffd9" +
    "\040\uffd9\041\uffd9\042\103\043\uffd9\044\uffd9\046\uffd9\106" +
    "\100\001\002\000\052\014\uffd4\015\uffd4\016\115\017\106" +
    "\020\111\021\077\023\uffd4\026\uffd4\031\uffd4\032\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\046\uffd4\106\100\001\002\000\052\014\uffd2\015" +
    "\uffd2\016\115\017\106\020\111\021\077\023\uffd2\026\uffd2" +
    "\031\uffd2\032\076\035\113\036\114\037\104\040\107\041" +
    "\101\042\103\043\105\044\uffd2\046\uffd2\106\100\001\002" +
    "\000\052\014\uffd6\015\uffd6\016\115\017\106\020\111\021" +
    "\077\023\uffd6\026\uffd6\031\uffd6\032\uffd6\035\113\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\103\043\uffd6\044\uffd6\046" +
    "\uffd6\106\100\001\002\000\052\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\020\uffda\021\uffda\023\uffda\026\uffda\031\uffda\032" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\046\uffda\106\uffda\001\002\000\052\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\023\uffdb" +
    "\026\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\046\uffdb\106\100" +
    "\001\002\000\052\014\uffd1\015\uffd1\016\115\017\106\020" +
    "\111\021\077\023\uffd1\026\uffd1\031\uffd1\032\uffd1\035\113" +
    "\036\114\037\104\040\107\041\101\042\103\043\uffd1\044" +
    "\uffd1\046\uffd1\106\100\001\002\000\046\011\055\012\045" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\052\014\uffaa\015" +
    "\uffaa\016\115\017\106\020\111\021\077\023\uffaa\026\uffaa" +
    "\031\uffaa\032\076\035\113\036\114\037\104\040\107\041" +
    "\101\042\103\043\105\044\102\046\110\106\100\001\002" +
    "\000\046\011\055\012\045\017\061\022\070\033\052\034" +
    "\043\045\050\054\063\055\053\056\046\057\057\060\044" +
    "\077\065\101\064\102\062\103\047\104\067\105\051\001" +
    "\002\000\052\014\uffab\015\uffab\016\115\017\106\020\111" +
    "\021\077\023\uffab\026\uffab\031\uffab\032\076\035\113\036" +
    "\114\037\104\040\107\041\101\042\103\043\105\044\102" +
    "\046\110\106\100\001\002\000\046\011\055\012\045\017" +
    "\061\022\070\033\052\034\043\045\050\054\063\055\053" +
    "\056\046\057\057\060\044\077\065\101\064\102\062\103" +
    "\047\104\067\105\051\001\002\000\042\016\115\017\106" +
    "\020\111\021\077\023\145\032\076\035\113\036\114\037" +
    "\104\040\107\041\101\042\103\043\105\044\102\046\110" +
    "\106\100\001\002\000\052\014\uffa6\015\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\023\uffa6\026\uffa6\031\uffa6\032\uffa6" +
    "\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\046\uffa6\106\uffa6\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\042\016" +
    "\115\017\106\020\111\021\077\023\150\032\076\035\113" +
    "\036\114\037\104\040\107\041\101\042\103\043\105\044" +
    "\102\046\110\106\100\001\002\000\052\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\020\uffad\021\uffad\023\uffad\026\uffad\031" +
    "\uffad\032\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\046\uffad\106\uffad\001\002\000" +
    "\046\011\055\012\045\017\061\022\070\033\052\034\043" +
    "\045\050\054\063\055\053\056\046\057\057\060\044\077" +
    "\065\101\064\102\062\103\047\104\067\105\051\001\002" +
    "\000\042\016\115\017\106\020\111\021\077\023\153\032" +
    "\076\035\113\036\114\037\104\040\107\041\101\042\103" +
    "\043\105\044\102\046\110\106\100\001\002\000\052\014" +
    "\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\023\uffa9" +
    "\026\uffa9\031\uffa9\032\uffa9\035\uffa9\036\uffa9\037\uffa9\040" +
    "\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\046\uffa9\106\uffa9" +
    "\001\002\000\054\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\023\uff9f\025\162\026\uff9f\031\uff9f\032\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043" +
    "\uff9f\044\uff9f\046\uff9f\106\uff9f\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\052\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5" +
    "\026\uffc5\031\uffc5\032\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\106\uffc5" +
    "\001\002\000\052\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\023\uffc6\026\uffc6\031\uffc6\032\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\046\uffc6\106\uffc6\001\002\000\042\016\115\017\106" +
    "\020\111\021\077\026\161\032\076\035\113\036\114\037" +
    "\104\040\107\041\101\042\103\043\105\044\102\046\110" +
    "\106\100\001\002\000\056\013\uffa0\014\uffa0\015\uffa0\016" +
    "\uffa0\017\uffa0\020\uffa0\021\uffa0\023\uffa0\025\uffa0\026\uffa0" +
    "\031\uffa0\032\uffa0\035\uffa0\036\uffa0\037\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\044\uffa0\046\uffa0\106\uffa0\001\002" +
    "\000\046\011\055\012\045\017\061\022\070\033\052\034" +
    "\043\045\050\054\063\055\053\056\046\057\057\060\044" +
    "\077\065\101\064\102\062\103\047\104\067\105\051\001" +
    "\002\000\042\016\115\017\106\020\111\021\077\026\164" +
    "\032\076\035\113\036\114\037\104\040\107\041\101\042" +
    "\103\043\105\044\102\046\110\106\100\001\002\000\056" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\023\uffa1\025\uffa1\026\uffa1\031\uffa1\032\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\046\uffa1\106\uffa1\001\002\000\046\011\055\012\045" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\042\016\115\017" +
    "\106\020\111\021\077\023\167\032\076\035\113\036\114" +
    "\037\104\040\107\041\101\042\103\043\105\044\102\046" +
    "\110\106\100\001\002\000\052\014\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\023\uffa8\026\uffa8\031\uffa8\032" +
    "\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8" +
    "\043\uffa8\044\uffa8\046\uffa8\106\uffa8\001\002\000\052\014" +
    "\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\026\uffdf\031\uffdf\032\uffdf\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\106\uffdf" +
    "\001\002\000\004\027\172\001\002\000\006\072\174\073" +
    "\173\001\002\000\004\031\205\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\010\030" +
    "\177\072\174\073\173\001\002\000\010\030\uffb5\072\uffb5" +
    "\073\uffb5\001\002\000\056\002\uffb7\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\027\uffb7\030\uffb7\054\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072" +
    "\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\100\uffb7\001\002" +
    "\000\010\030\uffb6\072\uffb6\073\uffb6\001\002\000\042\016" +
    "\115\017\106\020\111\021\077\031\202\032\076\035\113" +
    "\036\114\037\104\040\107\041\101\042\103\043\105\044" +
    "\102\046\110\106\100\001\002\000\046\004\004\005\007" +
    "\006\012\007\035\010\011\027\021\054\026\062\040\063" +
    "\024\064\027\066\006\067\034\070\037\071\041\074\031" +
    "\075\032\076\010\100\022\001\002\000\054\004\004\005" +
    "\007\006\012\007\035\010\011\027\021\030\uffb4\054\026" +
    "\062\040\063\024\064\027\066\006\067\034\070\037\071" +
    "\041\072\uffb4\073\uffb4\074\031\075\032\076\010\100\022" +
    "\001\002\000\056\002\uffff\004\uffff\005\uffff\006\uffff\007" +
    "\uffff\010\uffff\027\uffff\030\uffff\054\uffff\062\uffff\063\uffff" +
    "\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073" +
    "\uffff\074\uffff\075\uffff\076\uffff\100\uffff\001\002\000\046" +
    "\004\004\005\007\006\012\007\035\010\011\027\021\054" +
    "\026\062\040\063\024\064\027\066\006\067\034\070\037" +
    "\071\041\074\031\075\032\076\010\100\022\001\002\000" +
    "\054\004\004\005\007\006\012\007\035\010\011\027\021" +
    "\030\uffb3\054\026\062\040\063\024\064\027\066\006\067" +
    "\034\070\037\071\041\072\uffb3\073\uffb3\074\031\075\032" +
    "\076\010\100\022\001\002\000\052\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\026\uffc3\031\uffc3" +
    "\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\046\uffc3\106\uffc3\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\042\015\212\016\115\017\106\020\111\021\077\032\076" +
    "\035\113\036\114\037\104\040\107\041\101\042\103\043" +
    "\105\044\102\046\110\106\100\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\063\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\042\016" +
    "\115\017\106\020\111\021\077\023\214\032\076\035\113" +
    "\036\114\037\104\040\107\041\101\042\103\043\105\044" +
    "\102\046\110\106\100\001\002\000\052\014\uffa5\015\uffa5" +
    "\016\uffa5\017\uffa5\020\uffa5\021\uffa5\023\uffa5\026\uffa5\031" +
    "\uffa5\032\uffa5\035\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\046\uffa5\106\uffa5\001\002\000" +
    "\052\014\uffd0\015\uffd0\016\115\017\106\020\111\021\077" +
    "\023\uffd0\026\uffd0\031\uffd0\032\uffd0\035\113\036\114\037" +
    "\104\040\107\041\101\042\103\043\uffd0\044\uffd0\046\uffd0" +
    "\106\100\001\002\000\046\011\055\012\045\017\061\022" +
    "\070\033\052\034\043\045\050\054\063\055\053\056\046" +
    "\057\057\060\044\077\065\101\064\102\062\103\047\104" +
    "\067\105\051\001\002\000\042\016\115\017\106\020\111" +
    "\021\077\023\220\032\076\035\113\036\114\037\104\040" +
    "\107\041\101\042\103\043\105\044\102\046\110\106\100" +
    "\001\002\000\052\014\uffa7\015\uffa7\016\uffa7\017\uffa7\020" +
    "\uffa7\021\uffa7\023\uffa7\026\uffa7\031\uffa7\032\uffa7\035\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044" +
    "\uffa7\046\uffa7\106\uffa7\001\002\000\052\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\026\uffc4\031" +
    "\uffc4\032\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\046\uffc4\106\uffc4\001\002\000" +
    "\046\011\055\012\045\017\061\022\070\033\052\034\043" +
    "\045\050\054\063\055\053\056\046\057\057\060\044\077" +
    "\065\101\064\102\062\103\047\104\067\105\051\001\002" +
    "\000\042\016\115\017\106\020\111\021\077\023\224\032" +
    "\076\035\113\036\114\037\104\040\107\041\101\042\103" +
    "\043\105\044\102\046\110\106\100\001\002\000\004\014" +
    "\225\001\002\000\056\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\027\ufffb\030\ufffb\054\ufffb\062\ufffb\063" +
    "\ufffb\064\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\075\ufffb\076\ufffb\100\ufffb\001\002\000" +
    "\042\014\230\016\115\017\106\020\111\021\077\032\076" +
    "\035\113\036\114\037\104\040\107\041\101\042\103\043" +
    "\105\044\102\046\110\106\100\001\002\000\056\002\ufff3" +
    "\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\027\ufff3\030" +
    "\ufff3\054\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\076" +
    "\ufff3\100\ufff3\001\002\000\056\002\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\027\ufff2\030\ufff2\054\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2" +
    "\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\100\ufff2\001" +
    "\002\000\056\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\027\ufff4\030\ufff4\054\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\100\ufff4\001\002\000\012\013" +
    "\236\014\237\015\240\025\235\001\002\000\012\013\uffe0" +
    "\014\uffe0\015\uffe0\025\uffe0\001\002\000\010\013\246\014" +
    "\247\025\245\001\002\000\004\026\244\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\120\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\011\uffe9\012\uffe9\017\uffe9\022\uffe9\027\uffe9\030\uffe9\033" +
    "\uffe9\034\uffe9\045\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\062\uffe9\063\uffe9\064\uffe9\066\uffe9\067\uffe9\070" +
    "\uffe9\071\uffe9\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9" +
    "\077\uffe9\100\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105" +
    "\uffe9\001\002\000\004\054\241\001\002\000\012\013\uffe1" +
    "\014\uffe1\015\uffe1\025\uffe1\001\002\000\042\014\243\016" +
    "\115\017\106\020\111\021\077\032\076\035\113\036\114" +
    "\037\104\040\107\041\101\042\103\043\105\044\102\046" +
    "\110\106\100\001\002\000\120\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\017\uffea\022" +
    "\uffea\027\uffea\030\uffea\033\uffea\034\uffea\045\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064" +
    "\uffea\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea" +
    "\074\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102" +
    "\uffea\103\uffea\104\uffea\105\uffea\001\002\000\010\013\uffa2" +
    "\014\uffa2\025\uffa2\001\002\000\004\026\254\001\002\000" +
    "\004\107\250\001\002\000\120\002\uffe8\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\017\uffe8\022" +
    "\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\045\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\105\uffe8\001\002\000\014\004\004" +
    "\005\007\006\012\007\035\010\011\001\002\000\004\025" +
    "\155\001\002\000\006\014\253\025\162\001\002\000\120" +
    "\002\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011" +
    "\uffe7\012\uffe7\017\uffe7\022\uffe7\027\uffe7\030\uffe7\033\uffe7" +
    "\034\uffe7\045\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\062\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077" +
    "\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7" +
    "\001\002\000\010\013\uffa3\014\uffa3\025\uffa3\001\002\000" +
    "\016\004\004\005\007\006\012\007\035\010\011\054\256" +
    "\001\002\000\006\013\270\025\155\001\002\000\046\011" +
    "\055\012\045\017\061\022\070\033\052\034\043\045\050" +
    "\054\063\055\053\056\046\057\057\060\044\077\065\101" +
    "\064\102\062\103\047\104\067\105\051\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\042\014\262\016\115\017\106\020\111\021\077\032\076" +
    "\035\113\036\114\037\104\040\107\041\101\042\103\043" +
    "\105\044\102\046\110\106\100\001\002\000\046\011\055" +
    "\012\045\017\061\022\070\033\052\034\043\045\050\054" +
    "\266\055\053\056\046\057\057\060\044\077\065\101\064" +
    "\102\062\103\047\104\067\105\051\001\002\000\042\016" +
    "\115\017\106\020\111\021\077\023\uffaf\032\076\035\113" +
    "\036\114\037\104\040\107\041\101\042\103\043\105\044" +
    "\102\046\110\106\100\001\002\000\004\023\276\001\002" +
    "\000\004\023\uffae\001\002\000\052\013\270\016\uffcf\017" +
    "\uffcf\020\uffcf\021\uffcf\023\uffcf\025\155\032\uffcf\033\156" +
    "\034\157\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\046\uffcf\106\uffcf\001\002\000\046" +
    "\013\273\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\uff9f\025" +
    "\162\032\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\046\uff9f\106\uff9f\001\002\000" +
    "\046\011\055\012\045\017\061\022\070\033\052\034\043" +
    "\045\050\054\063\055\053\056\046\057\057\060\044\077" +
    "\065\101\064\102\062\103\047\104\067\105\051\001\002" +
    "\000\042\014\272\016\115\017\106\020\111\021\077\032" +
    "\076\035\113\036\114\037\104\040\107\041\101\042\103" +
    "\043\105\044\102\046\110\106\100\001\002\000\122\002" +
    "\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\017\uffec\022\uffec\023\uffec\027\uffec\030\uffec\033" +
    "\uffec\034\uffec\045\uffec\054\uffec\055\uffec\056\uffec\057\uffec" +
    "\060\uffec\062\uffec\063\uffec\064\uffec\066\uffec\067\uffec\070" +
    "\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075\uffec\076\uffec" +
    "\077\uffec\100\uffec\101\uffec\102\uffec\103\uffec\104\uffec\105" +
    "\uffec\001\002\000\046\011\055\012\045\017\061\022\070" +
    "\033\052\034\043\045\050\054\063\055\053\056\046\057" +
    "\057\060\044\077\065\101\064\102\062\103\047\104\067" +
    "\105\051\001\002\000\042\014\275\016\115\017\106\020" +
    "\111\021\077\032\076\035\113\036\114\037\104\040\107" +
    "\041\101\042\103\043\105\044\102\046\110\106\100\001" +
    "\002\000\122\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\017\uffeb\022\uffeb\023\uffeb\027" +
    "\uffeb\030\uffeb\033\uffeb\034\uffeb\045\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\057\uffeb\060\uffeb\062\uffeb\063\uffeb\064\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101\uffeb\102\uffeb\103" +
    "\uffeb\104\uffeb\105\uffeb\001\002\000\004\027\277\001\002" +
    "\000\046\004\004\005\007\006\012\007\035\010\011\027" +
    "\021\054\026\062\040\063\024\064\027\066\006\067\034" +
    "\070\037\071\041\074\031\075\032\076\010\100\022\001" +
    "\002\000\050\004\004\005\007\006\012\007\035\010\011" +
    "\027\021\030\301\054\026\062\040\063\024\064\027\066" +
    "\006\067\034\070\037\071\041\074\031\075\032\076\010" +
    "\100\022\001\002\000\056\002\uffb1\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\027\uffb1\030\uffb1\054\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072" +
    "\uffb1\073\uffb1\074\uffb1\075\uffb1\076\uffb1\100\uffb1\001\002" +
    "\000\042\014\303\016\115\017\106\020\111\021\077\032" +
    "\076\035\113\036\114\037\104\040\107\041\101\042\103" +
    "\043\105\044\102\046\110\106\100\001\002\000\046\011" +
    "\055\012\045\017\061\022\070\033\052\034\043\045\050" +
    "\054\266\055\053\056\046\057\057\060\044\077\065\101" +
    "\064\102\062\103\047\104\067\105\051\001\002\000\004" +
    "\023\305\001\002\000\004\027\306\001\002\000\046\004" +
    "\004\005\007\006\012\007\035\010\011\027\021\054\026" +
    "\062\040\063\024\064\027\066\006\067\034\070\037\071" +
    "\041\074\031\075\032\076\010\100\022\001\002\000\050" +
    "\004\004\005\007\006\012\007\035\010\011\027\021\030" +
    "\310\054\026\062\040\063\024\064\027\066\006\067\034" +
    "\070\037\071\041\074\031\075\032\076\010\100\022\001" +
    "\002\000\056\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0" +
    "\010\uffb0\027\uffb0\030\uffb0\054\uffb0\062\uffb0\063\uffb0\064" +
    "\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0" +
    "\074\uffb0\075\uffb0\076\uffb0\100\uffb0\001\002\000\006\013" +
    "\273\025\162\001\002\000\046\004\004\005\007\006\012" +
    "\007\035\010\011\027\021\054\026\062\040\063\024\064" +
    "\027\066\006\067\034\070\037\071\041\074\031\075\032" +
    "\076\010\100\022\001\002\000\050\004\004\005\007\006" +
    "\012\007\035\010\011\027\021\030\314\054\026\062\040" +
    "\063\024\064\027\066\006\067\034\070\037\071\041\074" +
    "\031\075\032\076\010\100\022\001\002\000\004\063\315" +
    "\001\002\000\004\022\316\001\002\000\046\011\055\012" +
    "\045\017\061\022\070\033\052\034\043\045\050\054\063" +
    "\055\053\056\046\057\057\060\044\077\065\101\064\102" +
    "\062\103\047\104\067\105\051\001\002\000\042\016\115" +
    "\017\106\020\111\021\077\023\320\032\076\035\113\036" +
    "\114\037\104\040\107\041\101\042\103\043\105\044\102" +
    "\046\110\106\100\001\002\000\004\014\321\001\002\000" +
    "\056\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\027\uffb2\030\uffb2\054\uffb2\062\uffb2\063\uffb2\064\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\100\uffb2\001\002\000\046\011\055\012" +
    "\045\017\061\022\070\033\052\034\043\045\050\054\063" +
    "\055\053\056\046\057\057\060\044\077\065\101\064\102" +
    "\062\103\047\104\067\105\051\001\002\000\042\016\115" +
    "\017\106\020\111\021\077\023\324\032\076\035\113\036" +
    "\114\037\104\040\107\041\101\042\103\043\105\044\102" +
    "\046\110\106\100\001\002\000\004\027\325\001\002\000" +
    "\046\004\004\005\007\006\012\007\035\010\011\027\021" +
    "\054\026\062\040\063\024\064\027\066\006\067\034\070" +
    "\037\071\041\074\031\075\032\076\010\100\022\001\002" +
    "\000\050\004\004\005\007\006\012\007\035\010\011\027" +
    "\021\030\327\054\026\062\040\063\024\064\027\066\006" +
    "\067\034\070\037\071\041\074\031\075\032\076\010\100" +
    "\022\001\002\000\060\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\027\uffbd\030\uffbd\054\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\065\330\066\uffbd\067\uffbd\070\uffbd\071\uffbd" +
    "\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\100\uffbd\001" +
    "\002\000\006\027\346\064\345\001\002\000\060\002\uffbb" +
    "\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\027\uffbb\030" +
    "\uffbb\054\uffbb\062\uffbb\063\uffbb\064\uffbb\065\332\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\100\uffbb\001\002\000\006\027\334\064\333" +
    "\001\002\000\004\022\337\001\002\000\046\004\004\005" +
    "\007\006\012\007\035\010\011\027\021\054\026\062\040" +
    "\063\024\064\027\066\006\067\034\070\037\071\041\074" +
    "\031\075\032\076\010\100\022\001\002\000\050\004\004" +
    "\005\007\006\012\007\035\010\011\027\021\030\336\054" +
    "\026\062\040\063\024\064\027\066\006\067\034\070\037" +
    "\071\041\074\031\075\032\076\010\100\022\001\002\000" +
    "\056\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\027\uffba\030\uffba\054\uffba\062\uffba\063\uffba\064\uffba\066" +
    "\uffba\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\076\uffba\100\uffba\001\002\000\046\011\055\012" +
    "\045\017\061\022\070\033\052\034\043\045\050\054\063" +
    "\055\053\056\046\057\057\060\044\077\065\101\064\102" +
    "\062\103\047\104\067\105\051\001\002\000\042\016\115" +
    "\017\106\020\111\021\077\023\341\032\076\035\113\036" +
    "\114\037\104\040\107\041\101\042\103\043\105\044\102" +
    "\046\110\106\100\001\002\000\004\027\342\001\002\000" +
    "\046\004\004\005\007\006\012\007\035\010\011\027\021" +
    "\054\026\062\040\063\024\064\027\066\006\067\034\070" +
    "\037\071\041\074\031\075\032\076\010\100\022\001\002" +
    "\000\050\004\004\005\007\006\012\007\035\010\011\027" +
    "\021\030\344\054\026\062\040\063\024\064\027\066\006" +
    "\067\034\070\037\071\041\074\031\075\032\076\010\100" +
    "\022\001\002\000\060\002\uffb9\004\uffb9\005\uffb9\006\uffb9" +
    "\007\uffb9\010\uffb9\027\uffb9\030\uffb9\054\uffb9\062\uffb9\063" +
    "\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9" +
    "\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\100\uffb9\001" +
    "\002\000\004\022\351\001\002\000\046\004\004\005\007" +
    "\006\012\007\035\010\011\027\021\054\026\062\040\063" +
    "\024\064\027\066\006\067\034\070\037\071\041\074\031" +
    "\075\032\076\010\100\022\001\002\000\050\004\004\005" +
    "\007\006\012\007\035\010\011\027\021\030\350\054\026" +
    "\062\040\063\024\064\027\066\006\067\034\070\037\071" +
    "\041\074\031\075\032\076\010\100\022\001\002\000\056" +
    "\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\027" +
    "\uffbc\030\uffbc\054\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075" +
    "\uffbc\076\uffbc\100\uffbc\001\002\000\046\011\055\012\045" +
    "\017\061\022\070\033\052\034\043\045\050\054\063\055" +
    "\053\056\046\057\057\060\044\077\065\101\064\102\062" +
    "\103\047\104\067\105\051\001\002\000\042\016\115\017" +
    "\106\020\111\021\077\023\353\032\076\035\113\036\114" +
    "\037\104\040\107\041\101\042\103\043\105\044\102\046" +
    "\110\106\100\001\002\000\004\027\354\001\002\000\046" +
    "\004\004\005\007\006\012\007\035\010\011\027\021\054" +
    "\026\062\040\063\024\064\027\066\006\067\034\070\037" +
    "\071\041\074\031\075\032\076\010\100\022\001\002\000" +
    "\050\004\004\005\007\006\012\007\035\010\011\027\021" +
    "\030\356\054\026\062\040\063\024\064\027\066\006\067" +
    "\034\070\037\071\041\074\031\075\032\076\010\100\022" +
    "\001\002\000\060\002\uffb8\004\uffb8\005\uffb8\006\uffb8\007" +
    "\uffb8\010\uffb8\027\uffb8\030\uffb8\054\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\100\uffb8\001\002" +
    "\000\004\014\362\001\002\000\004\014\361\001\002\000" +
    "\056\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\027\ufff6\030\ufff6\054\ufff6\062\ufff6\063\ufff6\064\ufff6\066" +
    "\ufff6\067\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\100\ufff6\001\002\000\056\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\027\ufff5\030\ufff5" +
    "\054\ufff5\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070" +
    "\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5" +
    "\100\ufff5\001\002\000\046\011\055\012\045\017\061\022" +
    "\070\033\052\034\043\045\050\054\063\055\053\056\046" +
    "\057\057\060\044\077\065\101\064\102\062\103\047\104" +
    "\067\105\051\001\002\000\042\016\115\017\106\020\111" +
    "\021\077\023\365\032\076\035\113\036\114\037\104\040" +
    "\107\041\101\042\103\043\105\044\102\046\110\106\100" +
    "\001\002\000\004\027\366\001\002\000\046\004\004\005" +
    "\007\006\012\007\035\010\011\027\021\054\026\062\040" +
    "\063\024\064\027\066\006\067\034\070\037\071\041\074" +
    "\031\075\032\076\010\100\022\001\002\000\050\004\004" +
    "\005\007\006\012\007\035\010\011\027\021\030\370\054" +
    "\026\062\040\063\024\064\027\066\006\067\034\070\037" +
    "\071\041\074\031\075\032\076\010\100\022\001\002\000" +
    "\056\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\027\ufff9\030\ufff9\054\ufff9\062\ufff9\063\ufff9\064\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\100\ufff9\001\002\000\046\011\055\012" +
    "\045\017\061\022\070\033\052\034\043\045\050\054\063" +
    "\055\053\056\046\057\057\060\044\077\065\101\064\102" +
    "\062\103\047\104\067\105\051\001\002\000\042\015\373" +
    "\016\115\017\106\020\111\021\077\032\076\035\113\036" +
    "\114\037\104\040\107\041\101\042\103\043\105\044\102" +
    "\046\110\106\100\001\002\000\046\011\055\012\045\017" +
    "\061\022\070\033\052\034\043\045\050\054\063\055\053" +
    "\056\046\057\057\060\044\077\065\101\064\102\062\103" +
    "\047\104\067\105\051\001\002\000\042\016\115\017\106" +
    "\020\111\021\077\023\375\032\076\035\113\036\114\037" +
    "\104\040\107\041\101\042\103\043\105\044\102\046\110" +
    "\106\100\001\002\000\004\014\376\001\002\000\056\002" +
    "\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\027\uffac" +
    "\030\uffac\054\uffac\062\uffac\063\uffac\064\uffac\066\uffac\067" +
    "\uffac\070\uffac\071\uffac\072\uffac\073\uffac\074\uffac\075\uffac" +
    "\076\uffac\100\uffac\001\002\000\050\004\004\005\007\006" +
    "\012\007\035\010\011\027\021\030\u0100\054\026\062\040" +
    "\063\024\064\027\066\006\067\034\070\037\071\041\074" +
    "\031\075\032\076\010\100\022\001\002\000\056\002\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\027\uffa4\030" +
    "\uffa4\054\uffa4\062\uffa4\063\uffa4\064\uffa4\066\uffa4\067\uffa4" +
    "\070\uffa4\071\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076" +
    "\uffa4\100\uffa4\001\002\000\004\002\001\001\002\000\046" +
    "\011\055\012\045\017\061\022\070\033\052\034\043\045" +
    "\050\054\063\055\053\056\046\057\057\060\044\077\065" +
    "\101\064\102\062\103\047\104\067\105\051\001\002\000" +
    "\042\016\115\017\106\020\111\021\077\023\u0104\032\076" +
    "\035\113\036\114\037\104\040\107\041\101\042\103\043" +
    "\105\044\102\046\110\106\100\001\002\000\004\014\u0105" +
    "\001\002\000\056\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007" +
    "\ufffa\010\ufffa\027\ufffa\030\ufffa\054\ufffa\062\ufffa\063\ufffa" +
    "\064\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073" +
    "\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa\001\002\000\056" +
    "\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\027" +
    "\ufff7\030\ufff7\054\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7" +
    "\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075" +
    "\ufff7\076\ufff7\100\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0104\000\032\002\012\003\013\004\022\005\017\006" +
    "\004\010\014\011\032\021\016\022\015\023\024\024\035" +
    "\025\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\013\004\022\005\017\006\203\011\032" +
    "\021\016\022\015\023\024\024\035\025\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\003\013\004\022\005\017\006\004\010\376\011\032\021" +
    "\016\022\015\023\024\024\035\025\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\225\014\070\015\065\016\055\017" +
    "\053\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\057\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\214\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\167\014\070\015" +
    "\065\016\055\017\053\020\071\001\001\000\002\001\001" +
    "\000\004\031\153\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\074" +
    "\014\070\015\065\016\055\017\053\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\135\014\070\015" +
    "\065\016\055\017\053\020\071\001\001\000\016\013\134" +
    "\014\070\015\065\016\055\017\053\020\071\001\001\000" +
    "\016\013\133\014\070\015\065\016\055\017\053\020\071" +
    "\001\001\000\016\013\132\014\070\015\065\016\055\017" +
    "\053\020\071\001\001\000\016\013\131\014\070\015\065" +
    "\016\055\017\053\020\071\001\001\000\016\013\130\014" +
    "\070\015\065\016\055\017\053\020\071\001\001\000\016" +
    "\013\127\014\070\015\065\016\055\017\053\020\071\001" +
    "\001\000\016\013\126\014\070\015\065\016\055\017\053" +
    "\020\071\001\001\000\016\013\125\014\070\015\065\016" +
    "\055\017\053\020\071\001\001\000\016\013\124\014\070" +
    "\015\065\016\055\017\053\020\071\001\001\000\016\013" +
    "\121\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\016\013\120\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\002\001\001\000\016\013\117\014\070" +
    "\015\065\016\055\017\053\020\071\001\001\000\016\013" +
    "\116\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\016\013\115\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\123\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\013\137\014\070\015\065" +
    "\016\055\017\053\020\071\001\001\000\002\001\001\000" +
    "\016\013\141\014\070\015\065\016\055\017\053\020\071" +
    "\001\001\000\002\001\001\000\016\013\143\014\070\015" +
    "\065\016\055\017\053\020\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\146\014\070\015\065\016" +
    "\055\017\053\020\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\151\014\070\015\065\016\055\017" +
    "\053\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\013\157\014\070\015\065\016" +
    "\055\017\053\020\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\162\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\165\014" +
    "\070\015\065\016\055\017\053\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\174\030\175\001\001\000\002\001\001" +
    "\000\016\013\200\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\004\030\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\013\004\022\005\017\006\004\010\202\011\032" +
    "\021\016\022\015\023\024\024\035\025\027\001\001\000" +
    "\026\003\013\004\022\005\017\006\203\011\032\021\016" +
    "\022\015\023\024\024\035\025\027\001\001\000\002\001" +
    "\001\000\030\003\013\004\022\005\017\006\004\010\205" +
    "\011\032\021\016\022\015\023\024\024\035\025\027\001" +
    "\001\000\026\003\013\004\022\005\017\006\203\011\032" +
    "\021\016\022\015\023\024\024\035\025\027\001\001\000" +
    "\002\001\001\000\016\013\210\014\070\015\065\016\055" +
    "\017\053\020\071\001\001\000\002\001\001\000\016\013" +
    "\212\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\013\216\014\070\015\065\016\055\017\053\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\013\222\014\070\015\065\016\055\017\053" +
    "\020\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\233\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\241\014\070\015\065\016\055\017\053\020\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\250\001\001\000\004\031\251\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\256" +
    "\004\257\011\032\001\001\000\004\031\310\001\001\000" +
    "\016\013\301\014\070\015\065\016\055\017\053\020\071" +
    "\001\001\000\016\013\260\014\070\015\065\016\055\017" +
    "\053\020\071\001\001\000\002\001\001\000\022\004\264" +
    "\007\263\013\262\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\266\001\001\000\002\001\001\000" +
    "\016\013\270\014\070\015\065\016\055\017\053\020\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\013" +
    "\273\014\070\015\065\016\055\017\053\020\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\003\013\004\022\005\017\006\004\010\277\011\032" +
    "\021\016\022\015\023\024\024\035\025\027\001\001\000" +
    "\026\003\013\004\022\005\017\006\203\011\032\021\016" +
    "\022\015\023\024\024\035\025\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\264\007\303\013\262" +
    "\014\070\015\065\016\055\017\053\020\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\003\013\004\022" +
    "\005\017\006\004\010\306\011\032\021\016\022\015\023" +
    "\024\024\035\025\027\001\001\000\026\003\013\004\022" +
    "\005\017\006\203\011\032\021\016\022\015\023\024\024" +
    "\035\025\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\013\004\022\005\017\006\004\010\312\011" +
    "\032\021\016\022\015\023\024\024\035\025\027\001\001" +
    "\000\026\003\013\004\022\005\017\006\203\011\032\021" +
    "\016\022\015\023\024\024\035\025\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\013\316\014\070\015" +
    "\065\016\055\017\053\020\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\013\322\014" +
    "\070\015\065\016\055\017\053\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\013\004\022\005" +
    "\017\006\004\010\325\011\032\021\016\022\015\023\024" +
    "\024\035\025\027\001\001\000\026\003\013\004\022\005" +
    "\017\006\203\011\032\021\016\022\015\023\024\024\035" +
    "\025\027\001\001\000\004\026\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\013\004\022\005\017\006\004\010\334\011" +
    "\032\021\016\022\015\023\024\024\035\025\027\001\001" +
    "\000\026\003\013\004\022\005\017\006\203\011\032\021" +
    "\016\022\015\023\024\024\035\025\027\001\001\000\002" +
    "\001\001\000\016\013\337\014\070\015\065\016\055\017" +
    "\053\020\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\003\013\004\022\005\017\006\004\010\342\011" +
    "\032\021\016\022\015\023\024\024\035\025\027\001\001" +
    "\000\026\003\013\004\022\005\017\006\203\011\032\021" +
    "\016\022\015\023\024\024\035\025\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\013\004\022\005" +
    "\017\006\004\010\346\011\032\021\016\022\015\023\024" +
    "\024\035\025\027\001\001\000\026\003\013\004\022\005" +
    "\017\006\203\011\032\021\016\022\015\023\024\024\035" +
    "\025\027\001\001\000\002\001\001\000\016\013\351\014" +
    "\070\015\065\016\055\017\053\020\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\003\013\004\022\005" +
    "\017\006\004\010\354\011\032\021\016\022\015\023\024" +
    "\024\035\025\027\001\001\000\026\003\013\004\022\005" +
    "\017\006\203\011\032\021\016\022\015\023\024\024\035" +
    "\025\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\363\014\070\015\065\016\055\017\053\020\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\003\013" +
    "\004\022\005\017\006\004\010\366\011\032\021\016\022" +
    "\015\023\024\024\035\025\027\001\001\000\026\003\013" +
    "\004\022\005\017\006\203\011\032\021\016\022\015\023" +
    "\024\024\035\025\027\001\001\000\002\001\001\000\016" +
    "\013\371\014\070\015\065\016\055\017\053\020\071\001" +
    "\001\000\002\001\001\000\016\013\373\014\070\015\065" +
    "\016\055\017\053\020\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\013\004\022" +
    "\005\017\006\203\011\032\021\016\022\015\023\024\024" +
    "\035\025\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\013\u0102\014\070\015\065\016\055\017\053\020" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    LinkedList<Nodo> arbol;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    public LinkedList<Nodo> getAST(){
        return arbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {





  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.arbol=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= rprintln parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Println(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= rprint parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Print(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= rwhile parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new While(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= rbreak ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Break(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= id menosmenos ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= id masmas ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= rcontinue ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Continue(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= rreturn ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= rreturn EXP ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DO_WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= WRITE_FILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ASIGNACION ::= id igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Asignacion(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ASIGNACION ::= id L_CORCHETES_INICIALIZADOS igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new AsignacionArreglo(aright,new Identificador(aright,a),b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= TIPO_VAR L_VARIABLES igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= TIPO_VAR L_VARIABLES ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES ptocoma 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES igual rnew TIPO_VAR L_CORCHETES_INICIALIZADOS ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> e = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new DeclaracionArreglo(fright,a,b,c,d,e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_VAR ::= rint 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPO_VAR ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPO_VAR ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPO_VAR ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPO_VAR ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // L_VARIABLES ::= L_VARIABLES coma id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // L_VARIABLES ::= id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(bright,a,Operacion.TipoO.NEGATIVO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP mas EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.SUMA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.RESTA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP por EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.MULTIPLICACION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.DIVISION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP porcentaje EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.MODULO,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP menque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP mayque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP mayigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP menigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP igualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.IGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP difque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.DIFQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.AND,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.OR,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.XOR,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(bright,a,Operacion.TipoO.NOT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Identificador(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Double.parseDouble(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a.charAt(1)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= rtrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= rfalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= parizq EXP parder 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a),true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a),true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= menosmenos id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= masmas id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= READ_FILE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= CAST 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= POW 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= ACCESO_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TERNARIO ::= EXP pregunta EXP dosptos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Ternario(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(dright,a,b,new If(eright,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new If(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(eright,a,b,c,new If(fright,d)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // L_ELSE_IF ::= L_ELSE_IF relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<If> a = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; RESULT.add(new If(dright,b,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // L_ELSE_IF ::= relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.add(new If(cright,a,b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SWITCH ::= rswitch parizq EXP parder llavizq BLOQUE_SWITCH llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Switch(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // BLOQUE_SWITCH ::= BLOQUE_SWITCH CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // BLOQUE_SWITCH ::= CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CASO_SWITCH ::= rcase EXP dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CASO_SWITCH ::= rdefault dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(bright,a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DO_WHILE ::= rdo llavizq INSTRUCCIONES llavder rwhile parizq EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new DoWhile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FOR ::= rfor parizq ASIGNACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FOR ::= rfor parizq DECLARACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CAMBIO_FOR ::= EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CAMBIO_FOR ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // READ_FILE ::= rreadfile parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new ReadFile(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ_FILE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // WRITE_FILE ::= rwritefile parizq EXP coma EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new WriteFile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_FILE",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CAST ::= parizq rint parder EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.INT),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CAST ::= parizq rchar parder EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.CHAR),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CAST ::= rstr parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.STRING),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CAST ::= rtodouble parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.DOUBLE),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CAST ::= rtoint parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.INT),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CAST ::= rtochar parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.CHAR),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // POW ::= rpow parizq EXP coma EXP parder 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.POTENCIA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POW",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // BLOQUE ::= llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Bloque(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // L_CORCHETES ::= L_CORCHETES corizq corder 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=a+1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // L_CORCHETES ::= corizq corder 
            {
              Integer RESULT =null;
		 RESULT=1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // L_CORCHETES_INICIALIZADOS ::= L_CORCHETES_INICIALIZADOS corizq EXP corder 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES_INICIALIZADOS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // L_CORCHETES_INICIALIZADOS ::= corizq EXP corder 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES_INICIALIZADOS",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ACCESO_ARREGLO ::= id L_CORCHETES_INICIALIZADOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new AccesoArreglo(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
