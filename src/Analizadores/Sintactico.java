
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Arbol.*;
import Expresiones.*;
import Instrucciones.*;
import Instrucciones.Condicionales.*;
import Instrucciones.Ciclos.*;
import Expresiones.Operaciones.*;
import CambioFlujo.*;
import FuncionesNativas.*;
import Excepciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\010" +
    "\004\000\002\010\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\007\000\002\006\007\000\002\006\011\000" +
    "\002\006\003\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\004\000\002\006\004\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\004\006\000\002\004\007\000\002" +
    "\004\010\000\002\004\006\000\002\003\007\000\002\003" +
    "\005\000\002\003\006\000\002\003\012\000\002\003\010" +
    "\000\002\003\010\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\005\000\002\012\003\000\002\013\004\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\005\000\002\013\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\005\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\007\000\002\022\011\000\002\022\015\000\002" +
    "\022\012\000\002\022\016\000\002\030\013\000\002\030" +
    "\012\000\002\023\011\000\002\031\004\000\002\031\003" +
    "\000\002\032\006\000\002\032\005\000\002\024\013\000" +
    "\002\025\014\000\002\025\014\000\002\007\003\000\002" +
    "\007\003\000\002\015\006\000\002\026\011\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\006" +
    "\000\002\016\006\000\002\016\006\000\002\017\010\000" +
    "\002\005\005\000\002\035\005\000\002\035\004\000\002" +
    "\033\006\000\002\033\005\000\002\020\004\000\002\036" +
    "\005\000\002\036\005\000\002\037\005\000\002\037\003" +
    "\000\002\034\005\000\002\034\003\000\002\027\012\000" +
    "\002\027\011\000\002\027\013\000\002\027\012\000\002" +
    "\040\003\000\002\040\003\000\002\040\003\000\002\041" +
    "\005\000\002\041\003\000\002\042\004\000\002\021\005" +
    "\000\002\021\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\054\004\026\005\045\006\027\007\046\010" +
    "\030\027\042\054\037\062\033\063\025\064\023\066\020" +
    "\067\041\070\011\071\017\074\047\075\031\076\040\100" +
    "\010\110\024\111\032\112\004\001\002\000\014\004\uff8b" +
    "\005\uff8b\006\uff8b\007\uff8b\010\uff8b\001\002\000\004\002" +
    "\u0145\001\002\000\014\004\026\005\045\006\027\007\046" +
    "\010\030\001\002\000\064\002\uffec\004\uffec\005\uffec\006" +
    "\uffec\007\uffec\010\uffec\027\uffec\030\uffec\054\uffec\062\uffec" +
    "\063\uffec\064\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072" +
    "\uffec\073\uffec\074\uffec\075\uffec\076\uffec\100\uffec\110\uffec" +
    "\111\uffec\112\uffec\001\002\000\004\022\u0133\001\002\000" +
    "\050\011\070\012\060\014\u0131\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\064\002\ufffe\004\ufffe\005\ufffe\006\ufffe\007" +
    "\ufffe\010\ufffe\027\ufffe\030\ufffe\054\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\100\ufffe\110\ufffe\111\ufffe" +
    "\112\ufffe\001\002\000\064\002\uffef\004\uffef\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\027\uffef\030\uffef\054\uffef\062\uffef" +
    "\063\uffef\064\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\100\uffef\110\uffef" +
    "\111\uffef\112\uffef\001\002\000\056\002\000\004\026\005" +
    "\045\006\027\007\046\010\030\027\042\054\037\062\033" +
    "\063\025\064\023\066\020\067\041\070\011\071\017\074" +
    "\047\075\031\076\040\100\010\110\024\111\032\112\004" +
    "\001\002\000\064\002\uffee\004\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\027\uffee\030\uffee\054\uffee\062\uffee\063\uffee" +
    "\064\uffee\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\073" +
    "\uffee\074\uffee\075\uffee\076\uffee\100\uffee\110\uffee\111\uffee" +
    "\112\uffee\001\002\000\064\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\007\ufff0\010\ufff0\027\ufff0\030\ufff0\054\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\100\ufff0\110\ufff0" +
    "\111\ufff0\112\ufff0\001\002\000\004\022\u0121\001\002\000" +
    "\004\014\u0120\001\002\000\004\054\u0110\001\002\000\064" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\027" +
    "\ufff8\030\ufff8\054\ufff8\062\ufff8\063\ufff8\064\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\100\ufff8\110\ufff8\111\ufff8\112\ufff8\001\002" +
    "\000\004\022\363\001\002\000\014\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\001\002\000\004\022\355\001\002" +
    "\000\006\025\uffe0\054\uffe0\001\002\000\006\025\uffde\054" +
    "\uffde\001\002\000\006\025\uffdc\054\uffdc\001\002\000\004" +
    "\022\276\001\002\000\014\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\001\002\000\004\022\272\001\002\000\064" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\027" +
    "\ufffc\030\ufffc\054\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc" +
    "\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\100\ufffc\110\ufffc\111\ufffc\112\ufffc\001\002" +
    "\000\064\002\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\027\ufff1\030\ufff1\054\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073\ufff1\074" +
    "\ufff1\075\ufff1\076\ufff1\100\ufff1\110\ufff1\111\ufff1\112\ufff1" +
    "\001\002\000\064\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\027\ufffd\030\ufffd\054\ufffd\062\ufffd\063\ufffd" +
    "\064\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073" +
    "\ufffd\074\ufffd\075\ufffd\076\ufffd\100\ufffd\110\ufffd\111\ufffd" +
    "\112\ufffd\001\002\000\014\013\243\022\173\025\172\033" +
    "\242\034\244\001\002\000\004\022\235\001\002\000\004" +
    "\014\234\001\002\000\054\004\026\005\045\006\027\007" +
    "\046\010\030\027\042\054\037\062\033\063\025\064\023" +
    "\066\020\067\041\070\011\071\017\074\047\075\031\076" +
    "\040\100\010\110\024\111\032\112\004\001\002\000\004" +
    "\014\231\001\002\000\064\002\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\010\uffed\027\uffed\030\uffed\054\uffed\062\uffed" +
    "\063\uffed\064\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072" +
    "\uffed\073\uffed\074\uffed\075\uffed\076\uffed\100\uffed\110\uffed" +
    "\111\uffed\112\uffed\001\002\000\006\025\uffdf\054\uffdf\001" +
    "\002\000\006\025\uffdd\054\uffdd\001\002\000\004\027\050" +
    "\001\002\000\054\004\026\005\045\006\027\007\046\010" +
    "\030\027\042\054\037\062\033\063\025\064\023\066\020" +
    "\067\041\070\011\071\017\074\047\075\031\076\040\100" +
    "\010\110\024\111\032\112\004\001\002\000\056\004\026" +
    "\005\045\006\027\007\046\010\030\027\042\030\053\054" +
    "\037\062\033\063\025\064\023\066\020\067\041\070\011" +
    "\071\017\074\047\075\031\076\040\100\010\110\024\111" +
    "\032\112\004\001\002\000\064\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\027\uffff\030\uffff\054\uffff\062" +
    "\uffff\063\uffff\064\uffff\066\uffff\067\uffff\070\uffff\071\uffff" +
    "\072\uffff\073\uffff\074\uffff\075\uffff\076\uffff\100\uffff\110" +
    "\uffff\111\uffff\112\uffff\001\002\000\004\063\054\001\002" +
    "\000\004\022\055\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\004\054\230\001\002" +
    "\000\054\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021" +
    "\uffc6\023\uffc6\026\uffc6\030\uffc6\031\uffc6\032\uffc6\035\uffc6" +
    "\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\046\uffc6\106\uffc6\001\002\000\054\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\026\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\106\uffc3\001" +
    "\002\000\054\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\021\uffc7\023\uffc7\026\uffc7\030\uffc7\031\uffc7\032\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\046\uffc7\106\uffc7\001\002\000\004\022\225\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\004\022\217\001\002\000\004\054\216\001" +
    "\002\000\054\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\021\uffc8\023\uffc8\026\uffc8\030\uffc8\031\uffc8\032\uffc8\035" +
    "\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8" +
    "\044\uffc8\046\uffc8\106\uffc8\001\002\000\054\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\020\uffba\021\uffba\023\uffba\026\uffba" +
    "\030\uffba\031\uffba\032\uffba\035\uffba\036\uffba\037\uffba\040" +
    "\uffba\041\uffba\042\uffba\043\uffba\044\uffba\046\uffba\106\uffba" +
    "\001\002\000\054\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\023\uffc4\026\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043" +
    "\uffc4\044\uffc4\046\uffc4\106\uffc4\001\002\000\054\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\026" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\035\uffb8\036\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\106" +
    "\uffb8\001\002\000\054\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\020\uffbb\021\uffbb\023\uffbb\026\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\046\uffbb\106\uffbb\001\002\000\042\016" +
    "\131\017\122\020\125\021\113\023\214\032\112\035\127" +
    "\036\130\037\116\040\123\041\115\042\120\043\121\044" +
    "\117\046\124\106\114\001\002\000\054\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\026\uffc5\030" +
    "\uffc5\031\uffc5\032\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\046\uffc5\106\uffc5\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\004\022\210\001\002\000\064\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\173\023\uffc9" +
    "\025\172\026\uffc9\030\uffc9\031\uffc9\032\uffc9\033\171\034" +
    "\174\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\046\uffc9\106\uffc9\001\002\000\004\022" +
    "\165\001\002\000\004\022\162\001\002\000\054\014\uffbc" +
    "\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\026" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\035\uffbc\036\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\046\uffbc\106" +
    "\uffbc\001\002\000\004\022\157\001\002\000\054\014\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\023\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\046\uffc2\106" +
    "\uffc2\001\002\000\052\004\107\006\110\011\070\012\060" +
    "\017\075\022\105\033\065\034\056\045\063\054\077\055" +
    "\066\056\061\057\074\060\057\077\101\101\100\102\076" +
    "\103\062\104\103\105\064\001\002\000\054\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9\026\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\046\uffb9\106\uffb9" +
    "\001\002\000\004\023\155\001\002\000\004\023\153\001" +
    "\002\000\042\016\131\017\122\020\125\021\113\023\126" +
    "\032\112\035\127\036\130\037\116\040\123\041\115\042" +
    "\120\043\121\044\117\046\124\106\114\001\002\000\046" +
    "\011\070\012\060\017\075\022\105\033\065\034\056\045" +
    "\063\054\077\055\066\056\061\057\074\060\057\077\101" +
    "\101\100\102\076\103\062\104\103\105\064\001\002\000" +
    "\046\011\070\012\060\017\075\022\105\033\065\034\056" +
    "\045\063\054\077\055\066\056\061\057\074\060\057\077" +
    "\101\101\100\102\076\103\062\104\103\105\064\001\002" +
    "\000\046\011\070\012\060\017\075\022\105\033\065\034" +
    "\056\045\063\054\077\055\066\056\061\057\074\060\057" +
    "\077\101\101\100\102\076\103\062\104\103\105\064\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\046\011\070\012\060\017\075\022\105\033" +
    "\065\034\056\045\063\054\077\055\066\056\061\057\074" +
    "\060\057\077\101\101\100\102\076\103\062\104\103\105" +
    "\064\001\002\000\046\011\070\012\060\017\075\022\105" +
    "\033\065\034\056\045\063\054\077\055\066\056\061\057" +
    "\074\060\057\077\101\101\100\102\076\103\062\104\103" +
    "\105\064\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\077\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\046\011\070\012\060\017\075" +
    "\022\105\033\065\034\056\045\063\054\077\055\066\056" +
    "\061\057\074\060\057\077\101\101\100\102\076\103\062" +
    "\104\103\105\064\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\046\011\070\012\060" +
    "\017\075\022\105\033\065\034\056\045\063\054\077\055" +
    "\066\056\061\057\074\060\057\077\101\101\100\102\076" +
    "\103\062\104\103\105\064\001\002\000\046\011\070\012" +
    "\060\017\075\022\105\033\065\034\056\045\063\054\077" +
    "\055\066\056\061\057\074\060\057\077\101\101\100\102" +
    "\076\103\062\104\103\105\064\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\054\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1" +
    "\026\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1\036\uffc1\037" +
    "\uffc1\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\046\uffc1" +
    "\106\uffc1\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\077\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\046\011\070\012\060\017\075" +
    "\022\105\033\065\034\056\045\063\054\077\055\066\056" +
    "\061\057\074\060\057\077\101\101\100\102\076\103\062" +
    "\104\103\105\064\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\054\014\uffd8\015\uffd8" +
    "\016\uffd8\017\uffd8\020\125\021\113\023\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\106\114\001" +
    "\002\000\054\014\uffd2\015\uffd2\016\131\017\122\020\125" +
    "\021\113\023\uffd2\026\uffd2\030\uffd2\031\uffd2\032\uffd2\035" +
    "\127\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\120\043\uffd2" +
    "\044\uffd2\046\uffd2\106\114\001\002\000\054\014\uffcf\015" +
    "\uffcf\016\131\017\122\020\125\021\113\023\uffcf\026\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\106\114" +
    "\001\002\000\054\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\026\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043" +
    "\uffd6\044\uffd6\046\uffd6\106\114\001\002\000\042\016\131" +
    "\017\122\020\125\021\113\031\137\032\112\035\127\036" +
    "\130\037\116\040\123\041\115\042\120\043\121\044\117" +
    "\046\124\106\114\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\054\014\uffb7\015\uffb7" +
    "\016\131\017\122\020\125\021\113\023\uffb7\026\uffb7\030" +
    "\uffb7\031\uffb7\032\112\035\127\036\130\037\116\040\123" +
    "\041\115\042\120\043\121\044\117\046\124\106\114\001" +
    "\002\000\054\014\uffd1\015\uffd1\016\131\017\122\020\125" +
    "\021\113\023\uffd1\026\uffd1\030\uffd1\031\uffd1\032\uffd1\035" +
    "\127\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\120\043\uffd1" +
    "\044\uffd1\046\uffd1\106\114\001\002\000\054\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\125\021\113\023\uffd7\026\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\035\uffd7\036\uffd7\037\uffd7\040" +
    "\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7\046\uffd7\106\114" +
    "\001\002\000\054\014\uffcd\015\uffcd\016\131\017\122\020" +
    "\125\021\113\023\uffcd\026\uffcd\030\uffcd\031\uffcd\032\112" +
    "\035\127\036\130\037\116\040\123\041\115\042\120\043" +
    "\uffcd\044\uffcd\046\uffcd\106\114\001\002\000\054\014\uffce" +
    "\015\uffce\016\131\017\122\020\125\021\113\023\uffce\026" +
    "\uffce\030\uffce\031\uffce\032\uffce\035\uffce\036\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce\106" +
    "\114\001\002\000\054\014\uffcc\015\uffcc\016\131\017\122" +
    "\020\125\021\113\023\uffcc\026\uffcc\030\uffcc\031\uffcc\032" +
    "\112\035\127\036\130\037\116\040\123\041\115\042\120" +
    "\043\121\044\uffcc\046\uffcc\106\114\001\002\000\054\014" +
    "\uffd3\015\uffd3\016\131\017\122\020\125\021\113\023\uffd3" +
    "\026\uffd3\030\uffd3\031\uffd3\032\uffd3\035\127\036\uffd3\037" +
    "\uffd3\040\uffd3\041\uffd3\042\120\043\uffd3\044\uffd3\046\uffd3" +
    "\106\114\001\002\000\054\014\uffd0\015\uffd0\016\131\017" +
    "\122\020\125\021\113\023\uffd0\026\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\035\127\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\120\043\uffd0\044\uffd0\046\uffd0\106\114\001\002\000\054" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\026\uffd4\030\uffd4\031\uffd4\032\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046" +
    "\uffd4\106\uffd4\001\002\000\054\014\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\026\uffd5\030\uffd5\031" +
    "\uffd5\032\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\046\uffd5\106\114\001\002\000" +
    "\054\014\uffcb\015\uffcb\016\131\017\122\020\125\021\113" +
    "\023\uffcb\026\uffcb\030\uffcb\031\uffcb\032\uffcb\035\127\036" +
    "\130\037\116\040\123\041\115\042\120\043\uffcb\044\uffcb" +
    "\046\uffcb\106\114\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\054\014\uffa3\015\uffa3" +
    "\016\131\017\122\020\125\021\113\023\uffa3\026\uffa3\030" +
    "\uffa3\031\uffa3\032\112\035\127\036\130\037\116\040\123" +
    "\041\115\042\120\043\121\044\117\046\124\106\114\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\054\014\uffa4\015\uffa4\016\131\017\122\020" +
    "\125\021\113\023\uffa4\026\uffa4\030\uffa4\031\uffa4\032\112" +
    "\035\127\036\130\037\116\040\123\041\115\042\120\043" +
    "\121\044\117\046\124\106\114\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\042\016" +
    "\131\017\122\020\125\021\113\023\161\032\112\035\127" +
    "\036\130\037\116\040\123\041\115\042\120\043\121\044" +
    "\117\046\124\106\114\001\002\000\054\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\023\uff9f\026\uff9f\030" +
    "\uff9f\031\uff9f\032\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\046\uff9f\106\uff9f\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\042\016\131\017\122\020\125\021\113\023" +
    "\164\032\112\035\127\036\130\037\116\040\123\041\115" +
    "\042\120\043\121\044\117\046\124\106\114\001\002\000" +
    "\054\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6" +
    "\023\uffa6\026\uffa6\030\uffa6\031\uffa6\032\uffa6\035\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\046\uffa6\106\uffa6\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\042\016\131\017\122" +
    "\020\125\021\113\023\167\032\112\035\127\036\130\037" +
    "\116\040\123\041\115\042\120\043\121\044\117\046\124" +
    "\106\114\001\002\000\054\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\023\uffa2\026\uffa2\030\uffa2\031\uffa2" +
    "\032\uffa2\035\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\046\uffa2\106\uffa2\001\002\000\056" +
    "\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\023" +
    "\uff98\025\205\026\uff98\030\uff98\031\uff98\032\uff98\035\uff98" +
    "\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044" +
    "\uff98\046\uff98\106\uff98\001\002\000\054\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\021\uffbf\023\uffbf\026\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\046\uffbf\106\uffbf\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\050\011\070\012\060\017\075\022\105\023" +
    "\177\033\065\034\056\045\063\054\077\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\054\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\023\uffc0\026\uffc0\030\uffc0\031" +
    "\uffc0\032\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\046\uffc0\106\uffc0\001\002\000" +
    "\006\015\201\023\200\001\002\000\046\015\uff92\016\131" +
    "\017\122\020\125\021\113\023\uff92\030\uff92\032\112\035" +
    "\127\036\130\037\116\040\123\041\115\042\120\043\121" +
    "\044\117\046\124\106\114\001\002\000\054\014\uff87\015" +
    "\uff87\016\uff87\017\uff87\020\uff87\021\uff87\023\uff87\026\uff87" +
    "\030\uff87\031\uff87\032\uff87\035\uff87\036\uff87\037\uff87\040" +
    "\uff87\041\uff87\042\uff87\043\uff87\044\uff87\046\uff87\106\uff87" +
    "\001\002\000\054\014\uff86\015\uff86\016\uff86\017\uff86\020" +
    "\uff86\021\uff86\023\uff86\026\uff86\030\uff86\031\uff86\032\uff86" +
    "\035\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043" +
    "\uff86\044\uff86\046\uff86\106\uff86\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\046\015" +
    "\uff93\016\131\017\122\020\125\021\113\023\uff93\030\uff93" +
    "\032\112\035\127\036\130\037\116\040\123\041\115\042" +
    "\120\043\121\044\117\046\124\106\114\001\002\000\042" +
    "\016\131\017\122\020\125\021\113\026\204\032\112\035" +
    "\127\036\130\037\116\040\123\041\115\042\120\043\121" +
    "\044\117\046\124\106\114\001\002\000\060\013\uff99\014" +
    "\uff99\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\023\uff99" +
    "\025\uff99\026\uff99\030\uff99\031\uff99\032\uff99\035\uff99\036" +
    "\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99" +
    "\046\uff99\106\uff99\001\002\000\046\011\070\012\060\017" +
    "\075\022\105\033\065\034\056\045\063\054\077\055\066" +
    "\056\061\057\074\060\057\077\101\101\100\102\076\103" +
    "\062\104\103\105\064\001\002\000\042\016\131\017\122" +
    "\020\125\021\113\026\207\032\112\035\127\036\130\037" +
    "\116\040\123\041\115\042\120\043\121\044\117\046\124" +
    "\106\114\001\002\000\060\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\023\uff9a\025\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\035\uff9a\036\uff9a\037\uff9a\040" +
    "\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\046\uff9a\106\uff9a" +
    "\001\002\000\046\011\070\012\060\017\075\022\105\033" +
    "\065\034\056\045\063\054\077\055\066\056\061\057\074" +
    "\060\057\077\101\101\100\102\076\103\062\104\103\105" +
    "\064\001\002\000\042\016\131\017\122\020\125\021\113" +
    "\023\212\032\112\035\127\036\130\037\116\040\123\041" +
    "\115\042\120\043\121\044\117\046\124\106\114\001\002" +
    "\000\054\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021" +
    "\uffa1\023\uffa1\026\uffa1\030\uffa1\031\uffa1\032\uffa1\035\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\046\uffa1\106\uffa1\001\002\000\054\014\uffd9\015\uffd9" +
    "\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\106\uffd9\001" +
    "\002\000\004\014\215\001\002\000\064\002\uffab\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\027\uffab\030\uffab\054" +
    "\uffab\062\uffab\063\uffab\064\uffab\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\100" +
    "\uffab\110\uffab\111\uffab\112\uffab\001\002\000\054\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\026" +
    "\uffbd\030\uffbd\031\uffbd\032\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\106" +
    "\uffbd\001\002\000\046\011\070\012\060\017\075\022\105" +
    "\033\065\034\056\045\063\054\077\055\066\056\061\057" +
    "\074\060\057\077\101\101\100\102\076\103\062\104\103" +
    "\105\064\001\002\000\042\015\221\016\131\017\122\020" +
    "\125\021\113\032\112\035\127\036\130\037\116\040\123" +
    "\041\115\042\120\043\121\044\117\046\124\106\114\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\042\016\131\017\122\020\125\021\113\023" +
    "\223\032\112\035\127\036\130\037\116\040\123\041\115" +
    "\042\120\043\121\044\117\046\124\106\114\001\002\000" +
    "\054\014\uff9e\015\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\023\uff9e\026\uff9e\030\uff9e\031\uff9e\032\uff9e\035\uff9e\036" +
    "\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\046\uff9e\106\uff9e\001\002\000\054\014\uffca\015\uffca\016" +
    "\131\017\122\020\125\021\113\023\uffca\026\uffca\030\uffca" +
    "\031\uffca\032\uffca\035\127\036\130\037\116\040\123\041" +
    "\115\042\120\043\uffca\044\uffca\046\uffca\106\114\001\002" +
    "\000\046\011\070\012\060\017\075\022\105\033\065\034" +
    "\056\045\063\054\077\055\066\056\061\057\074\060\057" +
    "\077\101\101\100\102\076\103\062\104\103\105\064\001" +
    "\002\000\042\016\131\017\122\020\125\021\113\023\227" +
    "\032\112\035\127\036\130\037\116\040\123\041\115\042" +
    "\120\043\121\044\117\046\124\106\114\001\002\000\054" +
    "\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\023" +
    "\uffa0\026\uffa0\030\uffa0\031\uffa0\032\uffa0\035\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\046" +
    "\uffa0\106\uffa0\001\002\000\054\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\021\uffbe\023\uffbe\026\uffbe\030\uffbe\031" +
    "\uffbe\032\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\046\uffbe\106\uffbe\001\002\000" +
    "\064\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\027\uffeb\030\uffeb\054\uffeb\062\uffeb\063\uffeb\064\uffeb\066" +
    "\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb" +
    "\075\uffeb\076\uffeb\100\uffeb\110\uffeb\111\uffeb\112\uffeb\001" +
    "\002\000\056\004\026\005\045\006\027\007\046\010\030" +
    "\027\042\030\233\054\037\062\033\063\025\064\023\066" +
    "\020\067\041\070\011\071\017\074\047\075\031\076\040" +
    "\100\010\110\024\111\032\112\004\001\002\000\064\002" +
    "\uff9d\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\027\uff9d" +
    "\030\uff9d\054\uff9d\062\uff9d\063\uff9d\064\uff9d\066\uff9d\067" +
    "\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d" +
    "\076\uff9d\100\uff9d\110\uff9d\111\uff9d\112\uff9d\001\002\000" +
    "\064\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\027\ufff4\030\ufff4\054\ufff4\062\ufff4\063\ufff4\064\ufff4\066" +
    "\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\100\ufff4\110\ufff4\111\ufff4\112\ufff4\001" +
    "\002\000\046\011\070\012\060\017\075\022\105\033\065" +
    "\034\056\045\063\054\077\055\066\056\061\057\074\060" +
    "\057\077\101\101\100\102\076\103\062\104\103\105\064" +
    "\001\002\000\042\016\131\017\122\020\125\021\113\023" +
    "\237\032\112\035\127\036\130\037\116\040\123\041\115" +
    "\042\120\043\121\044\117\046\124\106\114\001\002\000" +
    "\004\014\240\001\002\000\064\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\027\ufffa\030\ufffa\054\ufffa\062" +
    "\ufffa\063\ufffa\064\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa" +
    "\072\ufffa\073\ufffa\074\ufffa\075\ufffa\076\ufffa\100\ufffa\110" +
    "\ufffa\111\ufffa\112\ufffa\001\002\000\006\013\267\025\205" +
    "\001\002\000\004\014\266\001\002\000\052\011\070\012" +
    "\060\017\075\022\105\027\247\033\065\034\056\045\063" +
    "\054\077\055\066\056\061\057\074\060\057\077\101\101" +
    "\100\102\076\103\062\104\103\105\064\107\251\001\002" +
    "\000\004\014\245\001\002\000\064\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\027\ufff6\030\ufff6\054\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6\100\ufff6" +
    "\110\ufff6\111\ufff6\112\ufff6\001\002\000\004\014\265\001" +
    "\002\000\050\011\070\012\060\017\075\022\105\027\247" +
    "\033\065\034\056\045\063\054\077\055\066\056\061\057" +
    "\074\060\057\077\101\101\100\102\076\103\062\104\103" +
    "\105\064\001\002\000\042\014\255\016\131\017\122\020" +
    "\125\021\113\032\112\035\127\036\130\037\116\040\123" +
    "\041\115\042\120\043\121\044\117\046\124\106\114\001" +
    "\002\000\014\004\026\005\045\006\027\007\046\010\030" +
    "\001\002\000\004\025\172\001\002\000\006\014\254\025" +
    "\205\001\002\000\130\002\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\017\uffe8\022\uffe8\023" +
    "\uffe8\027\uffe8\030\uffe8\033\uffe8\034\uffe8\045\uffe8\054\uffe8" +
    "\055\uffe8\056\uffe8\057\uffe8\060\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8" +
    "\074\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\101\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\105\uffe8\110\uffe8\111\uffe8\112\uffe8" +
    "\001\002\000\130\002\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\017\uffea\022\uffea\023\uffea" +
    "\027\uffea\030\uffea\033\uffea\034\uffea\045\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\062\uffea\063\uffea\064\uffea" +
    "\066\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\074" +
    "\uffea\075\uffea\076\uffea\077\uffea\100\uffea\101\uffea\102\uffea" +
    "\103\uffea\104\uffea\105\uffea\110\uffea\111\uffea\112\uffea\001" +
    "\002\000\006\015\uff94\030\uff94\001\002\000\006\015\263" +
    "\030\262\001\002\000\006\015\201\030\261\001\002\000" +
    "\010\014\uff96\015\uff96\030\uff96\001\002\000\010\014\uff97" +
    "\015\uff97\030\uff97\001\002\000\004\027\247\001\002\000" +
    "\006\015\uff95\030\uff95\001\002\000\130\002\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\017" +
    "\uffe7\022\uffe7\023\uffe7\027\uffe7\030\uffe7\033\uffe7\034\uffe7" +
    "\045\uffe7\054\uffe7\055\uffe7\056\uffe7\057\uffe7\060\uffe7\062" +
    "\uffe7\063\uffe7\064\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7" +
    "\072\uffe7\073\uffe7\074\uffe7\075\uffe7\076\uffe7\077\uffe7\100" +
    "\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7\105\uffe7\110\uffe7" +
    "\111\uffe7\112\uffe7\001\002\000\064\002\ufff5\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\027\ufff5\030\ufff5\054\ufff5" +
    "\062\ufff5\063\ufff5\064\ufff5\066\ufff5\067\ufff5\070\ufff5\071" +
    "\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\100\ufff5" +
    "\110\ufff5\111\ufff5\112\ufff5\001\002\000\046\011\070\012" +
    "\060\017\075\022\105\033\065\034\056\045\063\054\077" +
    "\055\066\056\061\057\074\060\057\077\101\101\100\102" +
    "\076\103\062\104\103\105\064\001\002\000\042\014\271" +
    "\016\131\017\122\020\125\021\113\032\112\035\127\036" +
    "\130\037\116\040\123\041\115\042\120\043\121\044\117" +
    "\046\124\106\114\001\002\000\130\002\uffe9\004\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\017\uffe9" +
    "\022\uffe9\023\uffe9\027\uffe9\030\uffe9\033\uffe9\034\uffe9\045" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\062\uffe9" +
    "\063\uffe9\064\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\110\uffe9\111" +
    "\uffe9\112\uffe9\001\002\000\046\011\070\012\060\017\075" +
    "\022\105\033\065\034\056\045\063\054\077\055\066\056" +
    "\061\057\074\060\057\077\101\101\100\102\076\103\062" +
    "\104\103\105\064\001\002\000\042\016\131\017\122\020" +
    "\125\021\113\023\274\032\112\035\127\036\130\037\116" +
    "\040\123\041\115\042\120\043\121\044\117\046\124\106" +
    "\114\001\002\000\004\014\275\001\002\000\064\002\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\027\ufffb\030" +
    "\ufffb\054\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067\ufffb" +
    "\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076" +
    "\ufffb\100\ufffb\110\ufffb\111\ufffb\112\ufffb\001\002\000\016" +
    "\004\026\005\045\006\027\007\046\010\030\054\277\001" +
    "\002\000\006\013\243\025\172\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\046\011" +
    "\070\012\060\017\075\022\105\033\065\034\056\045\063" +
    "\054\077\055\066\056\061\057\074\060\057\077\101\101" +
    "\100\102\076\103\062\104\103\105\064\001\002\000\004" +
    "\054\304\001\002\000\012\013\307\014\310\015\311\025" +
    "\306\001\002\000\012\013\uffda\014\uffda\015\uffda\025\uffda" +
    "\001\002\000\010\013\317\014\320\025\316\001\002\000" +
    "\004\026\315\001\002\000\046\011\070\012\060\017\075" +
    "\022\105\033\065\034\056\045\063\054\077\055\066\056" +
    "\061\057\074\060\057\077\101\101\100\102\076\103\062" +
    "\104\103\105\064\001\002\000\126\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\017\uffe5" +
    "\022\uffe5\027\uffe5\030\uffe5\033\uffe5\034\uffe5\045\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073" +
    "\uffe5\074\uffe5\075\uffe5\076\uffe5\077\uffe5\100\uffe5\101\uffe5" +
    "\102\uffe5\103\uffe5\104\uffe5\105\uffe5\110\uffe5\111\uffe5\112" +
    "\uffe5\001\002\000\004\054\312\001\002\000\012\013\uffdb" +
    "\014\uffdb\015\uffdb\025\uffdb\001\002\000\042\014\314\016" +
    "\131\017\122\020\125\021\113\032\112\035\127\036\130" +
    "\037\116\040\123\041\115\042\120\043\121\044\117\046" +
    "\124\106\114\001\002\000\126\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\017\uffe6\022" +
    "\uffe6\027\uffe6\030\uffe6\033\uffe6\034\uffe6\045\uffe6\054\uffe6" +
    "\055\uffe6\056\uffe6\057\uffe6\060\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\077\uffe6\100\uffe6\101\uffe6\102" +
    "\uffe6\103\uffe6\104\uffe6\105\uffe6\110\uffe6\111\uffe6\112\uffe6" +
    "\001\002\000\010\013\uff9b\014\uff9b\025\uff9b\001\002\000" +
    "\004\026\332\001\002\000\010\027\247\054\324\107\322" +
    "\001\002\000\126\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\017\uffe4\022\uffe4\027\uffe4" +
    "\030\uffe4\033\uffe4\034\uffe4\045\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\066\uffe4" +
    "\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075" +
    "\uffe4\076\uffe4\077\uffe4\100\uffe4\101\uffe4\102\uffe4\103\uffe4" +
    "\104\uffe4\105\uffe4\110\uffe4\111\uffe4\112\uffe4\001\002\000" +
    "\004\014\331\001\002\000\014\004\026\005\045\006\027" +
    "\007\046\010\030\001\002\000\004\014\325\001\002\000" +
    "\004\025\172\001\002\000\126\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\017\uffe2\022" +
    "\uffe2\027\uffe2\030\uffe2\033\uffe2\034\uffe2\045\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2\073\uffe2" +
    "\074\uffe2\075\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\102" +
    "\uffe2\103\uffe2\104\uffe2\105\uffe2\110\uffe2\111\uffe2\112\uffe2" +
    "\001\002\000\004\025\172\001\002\000\006\014\330\025" +
    "\205\001\002\000\126\002\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\011\uffe3\012\uffe3\017\uffe3\022\uffe3\027" +
    "\uffe3\030\uffe3\033\uffe3\034\uffe3\045\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\057\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\066" +
    "\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3" +
    "\075\uffe3\076\uffe3\077\uffe3\100\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\105\uffe3\110\uffe3\111\uffe3\112\uffe3\001\002" +
    "\000\126\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\017\uffe1\022\uffe1\027\uffe1\030\uffe1" +
    "\033\uffe1\034\uffe1\045\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\062\uffe1\063\uffe1\064\uffe1\066\uffe1\067\uffe1" +
    "\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1" +
    "\105\uffe1\110\uffe1\111\uffe1\112\uffe1\001\002\000\010\013" +
    "\uff9c\014\uff9c\025\uff9c\001\002\000\042\014\334\016\131" +
    "\017\122\020\125\021\113\032\112\035\127\036\130\037" +
    "\116\040\123\041\115\042\120\043\121\044\117\046\124" +
    "\106\114\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\340\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\042\016\131\017\122\020\125" +
    "\021\113\023\uffa8\032\112\035\127\036\130\037\116\040" +
    "\123\041\115\042\120\043\121\044\117\046\124\106\114" +
    "\001\002\000\004\023\342\001\002\000\004\023\uffa7\001" +
    "\002\000\054\013\243\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\173\023\uffc9\025\172\032\uffc9\033\171\034\174\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9" +
    "\044\uffc9\046\uffc9\106\uffc9\001\002\000\046\013\267\016" +
    "\uff98\017\uff98\020\uff98\021\uff98\023\uff98\025\205\032\uff98" +
    "\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043" +
    "\uff98\044\uff98\046\uff98\106\uff98\001\002\000\004\027\343" +
    "\001\002\000\054\004\026\005\045\006\027\007\046\010" +
    "\030\027\042\054\037\062\033\063\025\064\023\066\020" +
    "\067\041\070\011\071\017\074\047\075\031\076\040\100" +
    "\010\110\024\111\032\112\004\001\002\000\056\004\026" +
    "\005\045\006\027\007\046\010\030\027\042\030\345\054" +
    "\037\062\033\063\025\064\023\066\020\067\041\070\011" +
    "\071\017\074\047\075\031\076\040\100\010\110\024\111" +
    "\032\112\004\001\002\000\064\002\uffaa\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\027\uffaa\030\uffaa\054\uffaa\062" +
    "\uffaa\063\uffaa\064\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa" +
    "\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa\100\uffaa\110" +
    "\uffaa\111\uffaa\112\uffaa\001\002\000\042\014\347\016\131" +
    "\017\122\020\125\021\113\032\112\035\127\036\130\037" +
    "\116\040\123\041\115\042\120\043\121\044\117\046\124" +
    "\106\114\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\340\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\004\023\351\001\002\000\004" +
    "\027\352\001\002\000\054\004\026\005\045\006\027\007" +
    "\046\010\030\027\042\054\037\062\033\063\025\064\023" +
    "\066\020\067\041\070\011\071\017\074\047\075\031\076" +
    "\040\100\010\110\024\111\032\112\004\001\002\000\056" +
    "\004\026\005\045\006\027\007\046\010\030\027\042\030" +
    "\354\054\037\062\033\063\025\064\023\066\020\067\041" +
    "\070\011\071\017\074\047\075\031\076\040\100\010\110" +
    "\024\111\032\112\004\001\002\000\064\002\uffa9\004\uffa9" +
    "\005\uffa9\006\uffa9\007\uffa9\010\uffa9\027\uffa9\030\uffa9\054" +
    "\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\067\uffa9\070\uffa9" +
    "\071\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\100" +
    "\uffa9\110\uffa9\111\uffa9\112\uffa9\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\042\016" +
    "\131\017\122\020\125\021\113\023\357\032\112\035\127" +
    "\036\130\037\116\040\123\041\115\042\120\043\121\044" +
    "\117\046\124\106\114\001\002\000\004\027\360\001\002" +
    "\000\054\004\026\005\045\006\027\007\046\010\030\027" +
    "\042\054\037\062\033\063\025\064\023\066\020\067\041" +
    "\070\011\071\017\074\047\075\031\076\040\100\010\110" +
    "\024\111\032\112\004\001\002\000\056\004\026\005\045" +
    "\006\027\007\046\010\030\027\042\030\362\054\037\062" +
    "\033\063\025\064\023\066\020\067\041\070\011\071\017" +
    "\074\047\075\031\076\040\100\010\110\024\111\032\112" +
    "\004\001\002\000\064\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\027\ufff9\030\ufff9\054\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\066\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\075\ufff9\076\ufff9\100\ufff9\110\ufff9\111" +
    "\ufff9\112\ufff9\001\002\000\046\011\070\012\060\017\075" +
    "\022\105\033\065\034\056\045\063\054\077\055\066\056" +
    "\061\057\074\060\057\077\101\101\100\102\076\103\062" +
    "\104\103\105\064\001\002\000\042\016\131\017\122\020" +
    "\125\021\113\023\365\032\112\035\127\036\130\037\116" +
    "\040\123\041\115\042\120\043\121\044\117\046\124\106" +
    "\114\001\002\000\004\027\366\001\002\000\054\004\026" +
    "\005\045\006\027\007\046\010\030\027\042\054\037\062" +
    "\033\063\025\064\023\066\020\067\041\070\011\071\017" +
    "\074\047\075\031\076\040\100\010\110\024\111\032\112" +
    "\004\001\002\000\056\004\026\005\045\006\027\007\046" +
    "\010\030\027\042\030\370\054\037\062\033\063\025\064" +
    "\023\066\020\067\041\070\011\071\017\074\047\075\031" +
    "\076\040\100\010\110\024\111\032\112\004\001\002\000" +
    "\066\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6" +
    "\027\uffb6\030\uffb6\054\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\371\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\076\uffb6\100\uffb6\110\uffb6\111\uffb6\112" +
    "\uffb6\001\002\000\006\027\u0107\064\u0106\001\002\000\066" +
    "\002\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\027" +
    "\uffb4\030\uffb4\054\uffb4\062\uffb4\063\uffb4\064\uffb4\065\373" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\100\uffb4\110\uffb4\111\uffb4\112\uffb4" +
    "\001\002\000\006\027\375\064\374\001\002\000\004\022" +
    "\u0100\001\002\000\054\004\026\005\045\006\027\007\046" +
    "\010\030\027\042\054\037\062\033\063\025\064\023\066" +
    "\020\067\041\070\011\071\017\074\047\075\031\076\040" +
    "\100\010\110\024\111\032\112\004\001\002\000\056\004" +
    "\026\005\045\006\027\007\046\010\030\027\042\030\377" +
    "\054\037\062\033\063\025\064\023\066\020\067\041\070" +
    "\011\071\017\074\047\075\031\076\040\100\010\110\024" +
    "\111\032\112\004\001\002\000\064\002\uffb3\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\027\uffb3\030\uffb3\054\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\066\uffb3\067\uffb3\070\uffb3\071" +
    "\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\100\uffb3" +
    "\110\uffb3\111\uffb3\112\uffb3\001\002\000\046\011\070\012" +
    "\060\017\075\022\105\033\065\034\056\045\063\054\077" +
    "\055\066\056\061\057\074\060\057\077\101\101\100\102" +
    "\076\103\062\104\103\105\064\001\002\000\042\016\131" +
    "\017\122\020\125\021\113\023\u0102\032\112\035\127\036" +
    "\130\037\116\040\123\041\115\042\120\043\121\044\117" +
    "\046\124\106\114\001\002\000\004\027\u0103\001\002\000" +
    "\054\004\026\005\045\006\027\007\046\010\030\027\042" +
    "\054\037\062\033\063\025\064\023\066\020\067\041\070" +
    "\011\071\017\074\047\075\031\076\040\100\010\110\024" +
    "\111\032\112\004\001\002\000\056\004\026\005\045\006" +
    "\027\007\046\010\030\027\042\030\u0105\054\037\062\033" +
    "\063\025\064\023\066\020\067\041\070\011\071\017\074" +
    "\047\075\031\076\040\100\010\110\024\111\032\112\004" +
    "\001\002\000\066\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\027\uffb2\030\uffb2\054\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071\uffb2\072" +
    "\uffb2\073\uffb2\074\uffb2\075\uffb2\076\uffb2\100\uffb2\110\uffb2" +
    "\111\uffb2\112\uffb2\001\002\000\004\022\u010a\001\002\000" +
    "\054\004\026\005\045\006\027\007\046\010\030\027\042" +
    "\054\037\062\033\063\025\064\023\066\020\067\041\070" +
    "\011\071\017\074\047\075\031\076\040\100\010\110\024" +
    "\111\032\112\004\001\002\000\056\004\026\005\045\006" +
    "\027\007\046\010\030\027\042\030\u0109\054\037\062\033" +
    "\063\025\064\023\066\020\067\041\070\011\071\017\074" +
    "\047\075\031\076\040\100\010\110\024\111\032\112\004" +
    "\001\002\000\064\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007" +
    "\uffb5\010\uffb5\027\uffb5\030\uffb5\054\uffb5\062\uffb5\063\uffb5" +
    "\064\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5\072\uffb5\073" +
    "\uffb5\074\uffb5\075\uffb5\076\uffb5\100\uffb5\110\uffb5\111\uffb5" +
    "\112\uffb5\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\077\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\042\016\131\017\122\020\125" +
    "\021\113\023\u010c\032\112\035\127\036\130\037\116\040" +
    "\123\041\115\042\120\043\121\044\117\046\124\106\114" +
    "\001\002\000\004\027\u010d\001\002\000\054\004\026\005" +
    "\045\006\027\007\046\010\030\027\042\054\037\062\033" +
    "\063\025\064\023\066\020\067\041\070\011\071\017\074" +
    "\047\075\031\076\040\100\010\110\024\111\032\112\004" +
    "\001\002\000\056\004\026\005\045\006\027\007\046\010" +
    "\030\027\042\030\u010f\054\037\062\033\063\025\064\023" +
    "\066\020\067\041\070\011\071\017\074\047\075\031\076" +
    "\040\100\010\110\024\111\032\112\004\001\002\000\066" +
    "\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\027" +
    "\uffb1\030\uffb1\054\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\076\uffb1\100\uffb1\110\uffb1\111\uffb1\112\uffb1" +
    "\001\002\000\014\013\uffda\014\uffda\015\uffda\022\u0111\025" +
    "\uffda\001\002\000\016\004\026\005\045\006\027\007\046" +
    "\010\030\023\u0113\001\002\000\006\015\u011b\023\u011a\001" +
    "\002\000\004\027\u0117\001\002\000\004\054\u0116\001\002" +
    "\000\006\015\uff89\023\uff89\001\002\000\006\015\uff88\023" +
    "\uff88\001\002\000\054\004\026\005\045\006\027\007\046" +
    "\010\030\027\042\054\037\062\033\063\025\064\023\066" +
    "\020\067\041\070\011\071\017\074\047\075\031\076\040" +
    "\100\010\110\024\111\032\112\004\001\002\000\056\004" +
    "\026\005\045\006\027\007\046\010\030\027\042\030\u0119" +
    "\054\037\062\033\063\025\064\023\066\020\067\041\070" +
    "\011\071\017\074\047\075\031\076\040\100\010\110\024" +
    "\111\032\112\004\001\002\000\064\002\uff90\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\027\uff90\030\uff90\054\uff90" +
    "\062\uff90\063\uff90\064\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\074\uff90\075\uff90\076\uff90\100\uff90" +
    "\110\uff90\111\uff90\112\uff90\001\002\000\004\027\u011d\001" +
    "\002\000\014\004\026\005\045\006\027\007\046\010\030" +
    "\001\002\000\006\015\uff8a\023\uff8a\001\002\000\054\004" +
    "\026\005\045\006\027\007\046\010\030\027\042\054\037" +
    "\062\033\063\025\064\023\066\020\067\041\070\011\071" +
    "\017\074\047\075\031\076\040\100\010\110\024\111\032" +
    "\112\004\001\002\000\056\004\026\005\045\006\027\007" +
    "\046\010\030\027\042\030\u011f\054\037\062\033\063\025" +
    "\064\023\066\020\067\041\070\011\071\017\074\047\075" +
    "\031\076\040\100\010\110\024\111\032\112\004\001\002" +
    "\000\064\002\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\027\uff8e\030\uff8e\054\uff8e\062\uff8e\063\uff8e\064\uff8e" +
    "\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\074" +
    "\uff8e\075\uff8e\076\uff8e\100\uff8e\110\uff8e\111\uff8e\112\uff8e" +
    "\001\002\000\064\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\027\ufff7\030\ufff7\054\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073" +
    "\ufff7\074\ufff7\075\ufff7\076\ufff7\100\ufff7\110\ufff7\111\ufff7" +
    "\112\ufff7\001\002\000\046\011\070\012\060\017\075\022" +
    "\105\033\065\034\056\045\063\054\077\055\066\056\061" +
    "\057\074\060\057\077\101\101\100\102\076\103\062\104" +
    "\103\105\064\001\002\000\042\016\131\017\122\020\125" +
    "\021\113\023\u0123\032\112\035\127\036\130\037\116\040" +
    "\123\041\115\042\120\043\121\044\117\046\124\106\114" +
    "\001\002\000\004\027\u0124\001\002\000\006\072\u0126\073" +
    "\u0125\001\002\000\004\031\u012e\001\002\000\046\011\070" +
    "\012\060\017\075\022\105\033\065\034\056\045\063\054" +
    "\077\055\066\056\061\057\074\060\057\077\101\101\100" +
    "\102\076\103\062\104\103\105\064\001\002\000\010\030" +
    "\u0129\072\u0126\073\u0125\001\002\000\010\030\uffae\072\uffae" +
    "\073\uffae\001\002\000\064\002\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\027\uffb0\030\uffb0\054\uffb0\062\uffb0" +
    "\063\uffb0\064\uffb0\066\uffb0\067\uffb0\070\uffb0\071\uffb0\072" +
    "\uffb0\073\uffb0\074\uffb0\075\uffb0\076\uffb0\100\uffb0\110\uffb0" +
    "\111\uffb0\112\uffb0\001\002\000\010\030\uffaf\072\uffaf\073" +
    "\uffaf\001\002\000\042\016\131\017\122\020\125\021\113" +
    "\031\u012c\032\112\035\127\036\130\037\116\040\123\041" +
    "\115\042\120\043\121\044\117\046\124\106\114\001\002" +
    "\000\054\004\026\005\045\006\027\007\046\010\030\027" +
    "\042\054\037\062\033\063\025\064\023\066\020\067\041" +
    "\070\011\071\017\074\047\075\031\076\040\100\010\110" +
    "\024\111\032\112\004\001\002\000\062\004\026\005\045" +
    "\006\027\007\046\010\030\027\042\030\uffad\054\037\062" +
    "\033\063\025\064\023\066\020\067\041\070\011\071\017" +
    "\072\uffad\073\uffad\074\047\075\031\076\040\100\010\110" +
    "\024\111\032\112\004\001\002\000\054\004\026\005\045" +
    "\006\027\007\046\010\030\027\042\054\037\062\033\063" +
    "\025\064\023\066\020\067\041\070\011\071\017\074\047" +
    "\075\031\076\040\100\010\110\024\111\032\112\004\001" +
    "\002\000\062\004\026\005\045\006\027\007\046\010\030" +
    "\027\042\030\uffac\054\037\062\033\063\025\064\023\066" +
    "\020\067\041\070\011\071\017\072\uffac\073\uffac\074\047" +
    "\075\031\076\040\100\010\110\024\111\032\112\004\001" +
    "\002\000\042\014\u0132\016\131\017\122\020\125\021\113" +
    "\032\112\035\127\036\130\037\116\040\123\041\115\042" +
    "\120\043\121\044\117\046\124\106\114\001\002\000\064" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\027" +
    "\ufff3\030\ufff3\054\ufff3\062\ufff3\063\ufff3\064\ufff3\066\ufff3" +
    "\067\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\076\ufff3\100\ufff3\110\ufff3\111\ufff3\112\ufff3\001\002" +
    "\000\064\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\027\ufff2\030\ufff2\054\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074" +
    "\ufff2\075\ufff2\076\ufff2\100\ufff2\110\ufff2\111\ufff2\112\ufff2" +
    "\001\002\000\046\011\070\012\060\017\075\022\105\033" +
    "\065\034\056\045\063\054\077\055\066\056\061\057\074" +
    "\060\057\077\101\101\100\102\076\103\062\104\103\105" +
    "\064\001\002\000\042\015\u0135\016\131\017\122\020\125" +
    "\021\113\032\112\035\127\036\130\037\116\040\123\041" +
    "\115\042\120\043\121\044\117\046\124\106\114\001\002" +
    "\000\046\011\070\012\060\017\075\022\105\033\065\034" +
    "\056\045\063\054\077\055\066\056\061\057\074\060\057" +
    "\077\101\101\100\102\076\103\062\104\103\105\064\001" +
    "\002\000\042\016\131\017\122\020\125\021\113\023\u0137" +
    "\032\112\035\127\036\130\037\116\040\123\041\115\042" +
    "\120\043\121\044\117\046\124\106\114\001\002\000\004" +
    "\014\u0138\001\002\000\064\002\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\027\uffa5\030\uffa5\054\uffa5\062\uffa5" +
    "\063\uffa5\064\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072" +
    "\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\100\uffa5\110\uffa5" +
    "\111\uffa5\112\uffa5\001\002\000\004\054\u013a\001\002\000" +
    "\004\022\u013b\001\002\000\016\004\026\005\045\006\027" +
    "\007\046\010\030\023\u013d\001\002\000\006\015\u011b\023" +
    "\u0141\001\002\000\004\027\u013e\001\002\000\054\004\026" +
    "\005\045\006\027\007\046\010\030\027\042\054\037\062" +
    "\033\063\025\064\023\066\020\067\041\070\011\071\017" +
    "\074\047\075\031\076\040\100\010\110\024\111\032\112" +
    "\004\001\002\000\056\004\026\005\045\006\027\007\046" +
    "\010\030\027\042\030\u0140\054\037\062\033\063\025\064" +
    "\023\066\020\067\041\070\011\071\017\074\047\075\031" +
    "\076\040\100\010\110\024\111\032\112\004\001\002\000" +
    "\064\002\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\027\uff91\030\uff91\054\uff91\062\uff91\063\uff91\064\uff91\066" +
    "\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91\074\uff91" +
    "\075\uff91\076\uff91\100\uff91\110\uff91\111\uff91\112\uff91\001" +
    "\002\000\004\027\u0142\001\002\000\054\004\026\005\045" +
    "\006\027\007\046\010\030\027\042\054\037\062\033\063" +
    "\025\064\023\066\020\067\041\070\011\071\017\074\047" +
    "\075\031\076\040\100\010\110\024\111\032\112\004\001" +
    "\002\000\056\004\026\005\045\006\027\007\046\010\030" +
    "\027\042\030\u0144\054\037\062\033\063\025\064\023\066" +
    "\020\067\041\070\011\071\017\074\047\075\031\076\040" +
    "\100\010\110\024\111\032\112\004\001\002\000\064\002" +
    "\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\027\uff8f" +
    "\030\uff8f\054\uff8f\062\uff8f\063\uff8f\064\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\100\uff8f\110\uff8f\111\uff8f\112\uff8f\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0143\000\040\002\004\003\035\004\033\005\043\006" +
    "\011\010\013\011\020\021\042\022\021\023\034\024\015" +
    "\025\012\026\014\027\006\040\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0138\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\u012f\014\103\015" +
    "\101\016\071\017\066\020\105\021\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\035\004\033\005" +
    "\043\006\051\011\020\021\042\022\021\023\034\024\015" +
    "\025\012\026\014\027\006\040\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\240\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\035\004\033" +
    "\005\043\006\011\010\231\011\020\021\042\022\021\023" +
    "\034\024\015\025\012\026\014\027\006\040\005\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\035\004\033" +
    "\005\043\006\011\010\050\011\020\021\042\022\021\023" +
    "\034\024\015\025\012\026\014\027\006\040\005\001\001" +
    "\000\034\003\035\004\033\005\043\006\051\011\020\021" +
    "\042\022\021\023\034\024\015\025\012\026\014\027\006" +
    "\040\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\072\014\103\015\101\016\071" +
    "\017\066\020\105\021\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\013\223\014\103\015\101\016\071\017" +
    "\066\020\105\021\070\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\013\212\014\103\015\101\016" +
    "\071\017\066\020\105\021\070\001\001\000\002\001\001" +
    "\000\004\033\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\110\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\013\151\014" +
    "\103\015\101\016\071\017\066\020\105\021\070\001\001" +
    "\000\020\013\150\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\020\013\147\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\020\013" +
    "\146\014\103\015\101\016\071\017\066\020\105\021\070" +
    "\001\001\000\020\013\145\014\103\015\101\016\071\017" +
    "\066\020\105\021\070\001\001\000\020\013\144\014\103" +
    "\015\101\016\071\017\066\020\105\021\070\001\001\000" +
    "\020\013\143\014\103\015\101\016\071\017\066\020\105" +
    "\021\070\001\001\000\020\013\142\014\103\015\101\016" +
    "\071\017\066\020\105\021\070\001\001\000\020\013\141" +
    "\014\103\015\101\016\071\017\066\020\105\021\070\001" +
    "\001\000\020\013\140\014\103\015\101\016\071\017\066" +
    "\020\105\021\070\001\001\000\020\013\135\014\103\015" +
    "\101\016\071\017\066\020\105\021\070\001\001\000\020" +
    "\013\134\014\103\015\101\016\071\017\066\020\105\021" +
    "\070\001\001\000\002\001\001\000\020\013\133\014\103" +
    "\015\101\016\071\017\066\020\105\021\070\001\001\000" +
    "\020\013\132\014\103\015\101\016\071\017\066\020\105" +
    "\021\070\001\001\000\020\013\131\014\103\015\101\016" +
    "\071\017\066\020\105\021\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\137\014\103\015\101\016\071" +
    "\017\066\020\105\021\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\153\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\002\001\001\000\020\013\155" +
    "\014\103\015\101\016\071\017\066\020\105\021\070\001" +
    "\001\000\002\001\001\000\020\013\157\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\162\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\013\165\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\202\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\022\013\175\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\034\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\013\201\014\103\015" +
    "\101\016\071\017\066\020\105\021\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\205\014\103\015\101\016\071\017\066\020\105\021\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\013" +
    "\210\014\103\015\101\016\071\017\066\020\105\021\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\217\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\002\001\001\000\020\013\221" +
    "\014\103\015\101\016\071\017\066\020\105\021\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\225\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\035\004" +
    "\033\005\043\006\051\011\020\021\042\022\021\023\034" +
    "\024\015\025\012\026\014\027\006\040\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\013\235\014\103" +
    "\015\101\016\071\017\066\020\105\021\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\013\247\014\103\015" +
    "\101\016\071\017\066\020\105\021\070\036\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\013\175\014\103\015\101\016\071\017\066\020\105" +
    "\021\070\034\257\036\255\037\256\001\001\000\002\001" +
    "\001\000\004\011\251\001\001\000\004\033\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\263\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\267\014\103\015\101\016\071\017\066\020\105\021" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\013\272\014\103\015\101\016\071\017\066\020\105\021" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\277\004\300\011\301\001\001\000" +
    "\004\033\240\001\001\000\020\013\345\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\020\013" +
    "\332\014\103\015\101\016\071\017\066\020\105\021\070" +
    "\001\001\000\004\012\302\001\001\000\004\035\304\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\013\312\014\103\015\101\016\071\017\066\020" +
    "\105\021\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\320\036\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\325\001\001\000\002\001\001\000\004\033\167\001\001" +
    "\000\002\001\001\000\004\033\326\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\336\007\335\013\334\014" +
    "\103\015\101\016\071\017\066\020\105\021\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\035\004\033\005\043\006\011\010\343\011" +
    "\020\021\042\022\021\023\034\024\015\025\012\026\014" +
    "\027\006\040\005\001\001\000\034\003\035\004\033\005" +
    "\043\006\051\011\020\021\042\022\021\023\034\024\015" +
    "\025\012\026\014\027\006\040\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\004\336\007\347\013\334" +
    "\014\103\015\101\016\071\017\066\020\105\021\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\035" +
    "\004\033\005\043\006\011\010\352\011\020\021\042\022" +
    "\021\023\034\024\015\025\012\026\014\027\006\040\005" +
    "\001\001\000\034\003\035\004\033\005\043\006\051\011" +
    "\020\021\042\022\021\023\034\024\015\025\012\026\014" +
    "\027\006\040\005\001\001\000\002\001\001\000\020\013" +
    "\355\014\103\015\101\016\071\017\066\020\105\021\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\035\004\033\005\043\006\011\010\360\011\020\021\042" +
    "\022\021\023\034\024\015\025\012\026\014\027\006\040" +
    "\005\001\001\000\034\003\035\004\033\005\043\006\051" +
    "\011\020\021\042\022\021\023\034\024\015\025\012\026" +
    "\014\027\006\040\005\001\001\000\002\001\001\000\020" +
    "\013\363\014\103\015\101\016\071\017\066\020\105\021" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\035\004\033\005\043\006\011\010\366\011\020\021" +
    "\042\022\021\023\034\024\015\025\012\026\014\027\006" +
    "\040\005\001\001\000\034\003\035\004\033\005\043\006" +
    "\051\011\020\021\042\022\021\023\034\024\015\025\012" +
    "\026\014\027\006\040\005\001\001\000\004\030\371\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\035\004\033\005\043\006" +
    "\011\010\375\011\020\021\042\022\021\023\034\024\015" +
    "\025\012\026\014\027\006\040\005\001\001\000\034\003" +
    "\035\004\033\005\043\006\051\011\020\021\042\022\021" +
    "\023\034\024\015\025\012\026\014\027\006\040\005\001" +
    "\001\000\002\001\001\000\020\013\u0100\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\003\035\004\033\005\043" +
    "\006\011\010\u0103\011\020\021\042\022\021\023\034\024" +
    "\015\025\012\026\014\027\006\040\005\001\001\000\034" +
    "\003\035\004\033\005\043\006\051\011\020\021\042\022" +
    "\021\023\034\024\015\025\012\026\014\027\006\040\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\035\004\033\005\043\006\011\010\u0107\011\020\021\042" +
    "\022\021\023\034\024\015\025\012\026\014\027\006\040" +
    "\005\001\001\000\034\003\035\004\033\005\043\006\051" +
    "\011\020\021\042\022\021\023\034\024\015\025\012\026" +
    "\014\027\006\040\005\001\001\000\002\001\001\000\020" +
    "\013\u010a\014\103\015\101\016\071\017\066\020\105\021" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\003\035\004\033\005\043\006\011\010\u010d\011\020\021" +
    "\042\022\021\023\034\024\015\025\012\026\014\027\006" +
    "\040\005\001\001\000\034\003\035\004\033\005\043\006" +
    "\051\011\020\021\042\022\021\023\034\024\015\025\012" +
    "\026\014\027\006\040\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\u0113\041\u0111\042\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\003\035\004\033" +
    "\005\043\006\011\010\u0117\011\020\021\042\022\021\023" +
    "\034\024\015\025\012\026\014\027\006\040\005\001\001" +
    "\000\034\003\035\004\033\005\043\006\051\011\020\021" +
    "\042\022\021\023\034\024\015\025\012\026\014\027\006" +
    "\040\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\u0113\042\u011b\001\001\000\002\001\001\000\036" +
    "\003\035\004\033\005\043\006\011\010\u011d\011\020\021" +
    "\042\022\021\023\034\024\015\025\012\026\014\027\006" +
    "\040\005\001\001\000\034\003\035\004\033\005\043\006" +
    "\051\011\020\021\042\022\021\023\034\024\015\025\012" +
    "\026\014\027\006\040\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\013\u0121\014\103\015\101\016\071" +
    "\017\066\020\105\021\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\031\u0126\032\u0127\001\001\000\002" +
    "\001\001\000\020\013\u012a\014\103\015\101\016\071\017" +
    "\066\020\105\021\070\001\001\000\004\032\u0129\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\035\004\033\005\043\006\011" +
    "\010\u012c\011\020\021\042\022\021\023\034\024\015\025" +
    "\012\026\014\027\006\040\005\001\001\000\034\003\035" +
    "\004\033\005\043\006\051\011\020\021\042\022\021\023" +
    "\034\024\015\025\012\026\014\027\006\040\005\001\001" +
    "\000\036\003\035\004\033\005\043\006\011\010\u012e\011" +
    "\020\021\042\022\021\023\034\024\015\025\012\026\014" +
    "\027\006\040\005\001\001\000\034\003\035\004\033\005" +
    "\043\006\051\011\020\021\042\022\021\023\034\024\015" +
    "\025\012\026\014\027\006\040\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\013\u0133" +
    "\014\103\015\101\016\071\017\066\020\105\021\070\001" +
    "\001\000\002\001\001\000\020\013\u0135\014\103\015\101" +
    "\016\071\017\066\020\105\021\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\u0113\041\u013b\042\u0114\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\035" +
    "\004\033\005\043\006\011\010\u013e\011\020\021\042\022" +
    "\021\023\034\024\015\025\012\026\014\027\006\040\005" +
    "\001\001\000\034\003\035\004\033\005\043\006\051\011" +
    "\020\021\042\022\021\023\034\024\015\025\012\026\014" +
    "\027\006\040\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\035\004\033\005\043\006\011\010\u0142" +
    "\011\020\021\042\022\021\023\034\024\015\025\012\026" +
    "\014\027\006\040\005\001\001\000\034\003\035\004\033" +
    "\005\043\006\051\011\020\021\042\022\021\023\034\024" +
    "\015\025\012\026\014\027\006\040\005\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    LinkedList<Nodo> arbol;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    public LinkedList<Nodo> getAST(){
        return arbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {





  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.arbol=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= rprintln parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Println(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= rprint parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Print(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= rwhile parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new While(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= rbreak ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Break(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= id menosmenos ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= id masmas ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= rcontinue ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Continue(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= rreturn ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= rreturn EXP ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DO_WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= WRITE_FILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= FUNCION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= LLAMADA_FUNCION ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ASIGNACION ::= id igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Asignacion(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ASIGNACION ::= id L_CORCHETES_INICIALIZADOS igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new AsignacionArreglo(aright,new Identificador(aright,a),b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ASIGNACION ::= id igual rnew TIPO_VAR L_CORCHETES_INICIALIZADOS ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new InicializacionArreglo(aright,new Identificador(aright,a),b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ASIGNACION ::= id igual INIT_ARREGLO ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new InicializacionArreglo(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= TIPO_VAR L_VARIABLES igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= TIPO_VAR L_VARIABLES ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new DeclaracionArreglo(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES igual rnew TIPO_VAR L_CORCHETES_INICIALIZADOS ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo d = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> e = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new DeclaracionArreglo(fright,a,b,c,d,e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES igual INIT_ARREGLO ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new DeclaracionArreglo(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION ::= TIPO_VAR L_VARIABLES L_CORCHETES igual ACCESO_ARREGLO ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new DeclaracionArreglo(eright,a,b,c,(AccesoArreglo)d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_VAR ::= rint 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_VAR ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_VAR ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_VAR ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_VAR ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // L_VARIABLES ::= L_VARIABLES coma id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // L_VARIABLES ::= id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(bright,a,Operacion.TipoO.NEGATIVO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP mas EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.SUMA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.RESTA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP por EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.MULTIPLICACION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.DIVISION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP porcentaje EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.MODULO,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP menque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP mayque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP mayigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP menigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP igualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.IGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP difque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.DIFQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.AND,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.OR,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.XOR,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(bright,a,Operacion.TipoO.NOT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Identificador(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Double.parseDouble(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a.charAt(1)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= rtrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= rfalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= parizq EXP parder 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a),true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a),true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= menosmenos id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXP ::= masmas id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXP ::= READ_FILE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXP ::= CAST 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXP ::= POW 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ACCESO_ARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= LLAMADA_FUNCION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TERNARIO ::= EXP pregunta EXP dosptos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Ternario(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(dright,a,b,new If(eright,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new If(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(eright,a,b,c,new If(fright,d)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // L_ELSE_IF ::= L_ELSE_IF relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<If> a = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; RESULT.add(new If(dright,b,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // L_ELSE_IF ::= relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.add(new If(cright,a,b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCH ::= rswitch parizq EXP parder llavizq BLOQUE_SWITCH llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Switch(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // BLOQUE_SWITCH ::= BLOQUE_SWITCH CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // BLOQUE_SWITCH ::= CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASO_SWITCH ::= rcase EXP dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASO_SWITCH ::= rdefault dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(bright,a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DO_WHILE ::= rdo llavizq INSTRUCCIONES llavder rwhile parizq EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new DoWhile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= rfor parizq ASIGNACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= rfor parizq DECLARACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CAMBIO_FOR ::= EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CAMBIO_FOR ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // READ_FILE ::= rreadfile parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new ReadFile(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ_FILE",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WRITE_FILE ::= rwritefile parizq EXP coma EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new WriteFile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_FILE",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CAST ::= parizq rint parder EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.INT),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CAST ::= parizq rchar parder EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.CHAR),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CAST ::= rstr parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.STRING),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CAST ::= rtodouble parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.DOUBLE),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CAST ::= rtoint parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.INT),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CAST ::= rtochar parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new CastExplicito(bright,new Tipo(Simbolo.TipoS.CHAR),a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAST",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // POW ::= rpow parizq EXP coma EXP parder 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.POTENCIA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("POW",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // BLOQUE ::= llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Bloque(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // L_CORCHETES ::= L_CORCHETES corizq corder 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=a+1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L_CORCHETES ::= corizq corder 
            {
              Integer RESULT =null;
		 RESULT=1; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L_CORCHETES_INICIALIZADOS ::= L_CORCHETES_INICIALIZADOS corizq EXP corder 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES_INICIALIZADOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // L_CORCHETES_INICIALIZADOS ::= corizq EXP corder 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_CORCHETES_INICIALIZADOS",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ACCESO_ARREGLO ::= id L_CORCHETES_INICIALIZADOS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new AccesoArreglo(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ACCESO_ARREGLO",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INIT_ARREGLO ::= llavizq LI llavder 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.addAll(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT_ARREGLO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INIT_ARREGLO ::= llavizq LE llavder 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.addAll(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INIT_ARREGLO",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LI ::= LI coma INIT_ARREGLO 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LI",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LI ::= INIT_ARREGLO 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LI",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LE ::= LE coma EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Expresion> a = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LE ::= EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LE",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // FUNCION ::= TIPO_ACCESO TIPO_VAR id parizq parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // FUNCION ::= TIPO_VAR id parizq parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // FUNCION ::= TIPO_ACCESO TIPO_VAR id parizq PARAMETROS_FUNCION parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		TipoAcceso a = (TipoAcceso)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<Simbolo> d = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> e = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new DeclaracionFuncion(cright,a,b,new Identificador(cright,c),d,e); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FUNCION ::= TIPO_VAR id parizq PARAMETROS_FUNCION parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FUNCION",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // TIPO_ACCESO ::= rpublic 
            {
              TipoAcceso RESULT =null;
		 RESULT=TipoAcceso.PUBLIC; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_ACCESO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TIPO_ACCESO ::= rprivate 
            {
              TipoAcceso RESULT =null;
		 RESULT=TipoAcceso.PRIVATE; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_ACCESO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TIPO_ACCESO ::= rprotected 
            {
              TipoAcceso RESULT =null;
		 RESULT=TipoAcceso.PROTECTED; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_ACCESO",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // PARAMETROS_FUNCION ::= PARAMETROS_FUNCION coma PARAMETRO_FUNCION 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Simbolo> a = (LinkedList<Simbolo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo b = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // PARAMETROS_FUNCION ::= PARAMETRO_FUNCION 
            {
              LinkedList<Simbolo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Simbolo a = (Simbolo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETROS_FUNCION",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PARAMETRO_FUNCION ::= TIPO_VAR id 
            {
              Simbolo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Simbolo(a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("PARAMETRO_FUNCION",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // LLAMADA_FUNCION ::= id parizq parder 
            {
              Expresion RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // LLAMADA_FUNCION ::= id parizq LE parder 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Expresion> b = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LlamadaFuncion(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LLAMADA_FUNCION",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
