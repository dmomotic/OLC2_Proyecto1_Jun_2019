
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Arbol.*;
import Expresiones.*;
import Instrucciones.*;
import Instrucciones.Condicionales.*;
import Instrucciones.Ciclos.*;
import Expresiones.Operaciones.*;
import CambioFlujo.*;
import FuncionesNativas.*;
import Excepciones.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\114\000\002\002\004\000\002\002\003\000\002\007" +
    "\004\000\002\007\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\007\000\002\005\007\000\002\005\011\000" +
    "\002\005\003\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\004\006\000\002\003\007\000" +
    "\002\003\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\011\003\000\002\012\004\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\013\007" +
    "\000\002\015\011\000\002\015\015\000\002\015\012\000" +
    "\002\015\016\000\002\022\013\000\002\022\012\000\002" +
    "\016\011\000\002\023\004\000\002\023\003\000\002\024" +
    "\006\000\002\024\005\000\002\017\013\000\002\020\014" +
    "\000\002\020\014\000\002\006\003\000\002\006\003\000" +
    "\002\014\006\000\002\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\044\004\004\005\007\006\012\007\033\010" +
    "\011\054\024\062\036\063\022\064\025\066\006\067\032" +
    "\070\035\071\037\074\027\075\031\076\010\100\020\001" +
    "\002\000\004\054\uffea\001\002\000\054\002\ufffe\004\ufffe" +
    "\005\ufffe\006\ufffe\007\ufffe\010\ufffe\030\ufffe\054\ufffe\062" +
    "\ufffe\063\ufffe\064\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe" +
    "\072\ufffe\073\ufffe\074\ufffe\075\ufffe\076\ufffe\100\ufffe\001" +
    "\002\000\004\014\306\001\002\000\004\054\uffe9\001\002" +
    "\000\004\022\302\001\002\000\004\054\uffe6\001\002\000" +
    "\004\054\uffe8\001\002\000\004\002\301\001\002\000\054" +
    "\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\030" +
    "\ufffd\054\ufffd\062\ufffd\063\ufffd\064\ufffd\066\ufffd\067\ufffd" +
    "\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\076" +
    "\ufffd\100\ufffd\001\002\000\046\002\000\004\004\005\007" +
    "\006\012\007\033\010\011\054\024\062\036\063\022\064" +
    "\025\066\006\067\032\070\035\071\037\074\027\075\031" +
    "\076\010\100\020\001\002\000\054\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\030\ufff1\054\ufff1\062\ufff1" +
    "\063\ufff1\064\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072" +
    "\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\100\ufff1\001\002" +
    "\000\054\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\030\ufff8\054\ufff8\062\ufff8\063\ufff8\064\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\100\ufff8\001\002\000\004\022\273\001\002" +
    "\000\054\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\030\ufffc\054\ufffc\062\ufffc\063\ufffc\064\ufffc\066\ufffc" +
    "\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc\075" +
    "\ufffc\076\ufffc\100\ufffc\001\002\000\004\022\265\001\002" +
    "\000\054\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\030\ufff0\054\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0" +
    "\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075" +
    "\ufff0\076\ufff0\100\ufff0\001\002\000\010\013\172\033\261" +
    "\034\262\001\002\000\004\022\224\001\002\000\054\002" +
    "\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\030\uffee" +
    "\054\uffee\062\uffee\063\uffee\064\uffee\066\uffee\067\uffee\070" +
    "\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075\uffee\076\uffee" +
    "\100\uffee\001\002\000\004\027\214\001\002\000\004\054" +
    "\205\001\002\000\004\022\154\001\002\000\004\014\153" +
    "\001\002\000\004\054\uffe7\001\002\000\054\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\030\uffef\054\uffef" +
    "\062\uffef\063\uffef\064\uffef\066\uffef\067\uffef\070\uffef\071" +
    "\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076\uffef\100\uffef" +
    "\001\002\000\032\011\046\012\053\014\150\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\004\022\144\001\002\000\004\022" +
    "\040\001\002\000\030\011\046\012\053\017\045\022\052" +
    "\045\042\054\041\055\050\056\044\057\047\060\043\077" +
    "\054\001\002\000\052\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\023\uffd4\031\uffd4\032\uffd4\033\142\034" +
    "\143\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\001\002\000\030\011\046\012" +
    "\053\017\045\022\052\045\042\054\041\055\050\056\044" +
    "\057\047\060\043\077\054\001\002\000\046\014\uffd1\015" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\031\uffd1" +
    "\032\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\046\uffd1\001\002\000\046\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\023\uffd2\031" +
    "\uffd2\032\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\043\uffd2\044\uffd2\046\uffd2\001\002\000\030\011" +
    "\046\012\053\017\045\022\052\045\042\054\041\055\050" +
    "\056\044\057\047\060\043\077\054\001\002\000\046\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\031\uffcf\032\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\046\uffcf\001\002\000\046" +
    "\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023" +
    "\uffd0\031\uffd0\032\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0" +
    "\041\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\001\002\000" +
    "\046\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3" +
    "\023\uffd3\031\uffd3\032\uffd3\035\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\001\002" +
    "\000\046\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021" +
    "\uffcd\023\uffcd\031\uffcd\032\uffcd\035\uffcd\036\uffcd\037\uffcd" +
    "\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\046\uffcd\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\041\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\046\014\uffce\015\uffce\016\uffce\017\uffce\020\uffce" +
    "\021\uffce\023\uffce\031\uffce\032\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\046\uffce" +
    "\001\002\000\004\022\133\001\002\000\040\016\075\017" +
    "\065\020\071\021\060\023\072\032\057\035\073\036\074" +
    "\037\064\040\066\041\061\042\063\043\067\044\062\046" +
    "\070\001\002\000\046\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\023\uffc9\031\uffc9\032\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\046\uffc9\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\004\027\101\001\002\000\030\011" +
    "\046\012\053\017\045\022\052\045\042\054\041\055\050" +
    "\056\044\057\047\060\043\077\054\001\002\000\030\011" +
    "\046\012\053\017\045\022\052\045\042\054\041\055\050" +
    "\056\044\057\047\060\043\077\054\001\002\000\030\011" +
    "\046\012\053\017\045\022\052\045\042\054\041\055\050" +
    "\056\044\057\047\060\043\077\054\001\002\000\046\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\071\021\060\023\uffe2" +
    "\031\uffe2\032\057\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\044\uffe2\046\uffe2\001\002\000\046" +
    "\014\uffdc\015\uffdc\016\075\017\065\020\071\021\060\023" +
    "\uffdc\031\uffdc\032\057\035\073\036\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\042\063\043\uffdc\044\uffdc\046\uffdc\001\002\000" +
    "\046\014\uffd9\015\uffd9\016\075\017\065\020\071\021\060" +
    "\023\uffd9\031\uffd9\032\057\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\046\uffd9\001\002" +
    "\000\006\072\103\073\102\001\002\000\004\031\114\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\041\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\010\030\106\072\103\073\102\001\002\000\010" +
    "\030\uffbf\072\uffbf\073\uffbf\001\002\000\054\002\uffc1\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\030\uffc1\054\uffc1" +
    "\062\uffc1\063\uffc1\064\uffc1\066\uffc1\067\uffc1\070\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\100\uffc1" +
    "\001\002\000\010\030\uffc0\072\uffc0\073\uffc0\001\002\000" +
    "\040\016\075\017\065\020\071\021\060\031\111\032\057" +
    "\035\073\036\074\037\064\040\066\041\061\042\063\043" +
    "\067\044\062\046\070\001\002\000\044\004\004\005\007" +
    "\006\012\007\033\010\011\054\024\062\036\063\022\064" +
    "\025\066\006\067\032\070\035\071\037\074\027\075\031" +
    "\076\010\100\020\001\002\000\052\004\004\005\007\006" +
    "\012\007\033\010\011\030\uffbe\054\024\062\036\063\022" +
    "\064\025\066\006\067\032\070\035\071\037\072\uffbe\073" +
    "\uffbe\074\027\075\031\076\010\100\020\001\002\000\054" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\030" +
    "\uffff\054\uffff\062\uffff\063\uffff\064\uffff\066\uffff\067\uffff" +
    "\070\uffff\071\uffff\072\uffff\073\uffff\074\uffff\075\uffff\076" +
    "\uffff\100\uffff\001\002\000\044\004\004\005\007\006\012" +
    "\007\033\010\011\054\024\062\036\063\022\064\025\066" +
    "\006\067\032\070\035\071\037\074\027\075\031\076\010" +
    "\100\020\001\002\000\052\004\004\005\007\006\012\007" +
    "\033\010\011\030\uffbd\054\024\062\036\063\022\064\025" +
    "\066\006\067\032\070\035\071\037\072\uffbd\073\uffbd\074" +
    "\027\075\031\076\010\100\020\001\002\000\046\014\uffe0" +
    "\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\023\uffe0\031" +
    "\uffe0\032\057\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\046\uffe0\001\002\000\040\016" +
    "\075\017\065\020\071\021\060\031\120\032\057\035\073" +
    "\036\074\037\064\040\066\041\061\042\063\043\067\044" +
    "\062\046\070\001\002\000\030\011\046\012\053\017\045" +
    "\022\052\045\042\054\041\055\050\056\044\057\047\060" +
    "\043\077\054\001\002\000\046\014\uffc8\015\uffc8\016\075" +
    "\017\065\020\071\021\060\023\uffc8\031\uffc8\032\057\035" +
    "\073\036\074\037\064\040\066\041\061\042\063\043\067" +
    "\044\062\046\070\001\002\000\046\014\uffd7\015\uffd7\016" +
    "\075\017\065\020\071\021\060\023\uffd7\031\uffd7\032\057" +
    "\035\073\036\074\037\064\040\066\041\061\042\063\043" +
    "\uffd7\044\uffd7\046\uffd7\001\002\000\046\014\uffdb\015\uffdb" +
    "\016\075\017\065\020\071\021\060\023\uffdb\031\uffdb\032" +
    "\057\035\073\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\063" +
    "\043\uffdb\044\uffdb\046\uffdb\001\002\000\046\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\071\021\060\023\uffe1\031\uffe1" +
    "\032\057\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\046\uffe1\001\002\000\046\014\uffdd" +
    "\015\uffdd\016\075\017\065\020\071\021\060\023\uffdd\031" +
    "\uffdd\032\057\035\073\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\063\043\uffdd\044\uffdd\046\uffdd\001\002\000\046\014" +
    "\uffd8\015\uffd8\016\075\017\065\020\071\021\060\023\uffd8" +
    "\031\uffd8\032\057\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\046\uffd8\001\002\000\046" +
    "\014\uffd6\015\uffd6\016\075\017\065\020\071\021\060\023" +
    "\uffd6\031\uffd6\032\057\035\073\036\074\037\064\040\066" +
    "\041\061\042\063\043\067\044\uffd6\046\uffd6\001\002\000" +
    "\046\014\uffda\015\uffda\016\075\017\065\020\071\021\060" +
    "\023\uffda\031\uffda\032\057\035\073\036\uffda\037\uffda\040" +
    "\uffda\041\uffda\042\063\043\uffda\044\uffda\046\uffda\001\002" +
    "\000\046\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\031\uffdf\032\057\035\uffdf\036\uffdf\037\uffdf" +
    "\040\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\046\uffdf\001" +
    "\002\000\046\014\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\021\uffde\023\uffde\031\uffde\032\057\035\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\046\uffde" +
    "\001\002\000\030\011\046\012\053\017\045\022\052\045" +
    "\042\054\041\055\050\056\044\057\047\060\043\077\054" +
    "\001\002\000\040\016\075\017\065\020\071\021\060\023" +
    "\135\032\057\035\073\036\074\037\064\040\066\041\061" +
    "\042\063\043\067\044\062\046\070\001\002\000\046\014" +
    "\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023\uffb7" +
    "\031\uffb7\032\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\043\uffb7\044\uffb7\046\uffb7\001\002\000\040" +
    "\016\075\017\065\020\071\021\060\023\137\032\057\035" +
    "\073\036\074\037\064\040\066\041\061\042\063\043\067" +
    "\044\062\046\070\001\002\000\046\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\023\uffcc\031\uffcc\032\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\046\uffcc\001\002\000\046\014\uffe3\015\uffe3" +
    "\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3\031\uffe3\032" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\043\uffe3\044\uffe3\046\uffe3\001\002\000\046\014\uffd5\015" +
    "\uffd5\016\075\017\065\020\071\021\060\023\uffd5\031\uffd5" +
    "\032\057\035\073\036\074\037\064\040\066\041\061\042" +
    "\063\043\uffd5\044\uffd5\046\uffd5\001\002\000\046\014\uffca" +
    "\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\031" +
    "\uffca\032\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\046\uffca\001\002\000\046\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb" +
    "\031\uffcb\032\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb\001\002\000\030" +
    "\011\046\012\053\017\045\022\052\045\042\054\041\055" +
    "\050\056\044\057\047\060\043\077\054\001\002\000\040" +
    "\016\075\017\065\020\071\021\060\023\146\032\057\035" +
    "\073\036\074\037\064\040\066\041\061\042\063\043\067" +
    "\044\062\046\070\001\002\000\004\014\147\001\002\000" +
    "\054\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\030\ufffb\054\ufffb\062\ufffb\063\ufffb\064\ufffb\066\ufffb\067" +
    "\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb" +
    "\076\ufffb\100\ufffb\001\002\000\054\002\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\030\ufff3\054\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\074\ufff3\075\ufff3\076\ufff3\100\ufff3\001\002" +
    "\000\040\014\152\016\075\017\065\020\071\021\060\032" +
    "\057\035\073\036\074\037\064\040\066\041\061\042\063" +
    "\043\067\044\062\046\070\001\002\000\054\002\ufff2\004" +
    "\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\030\ufff2\054\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\066\ufff2\067\ufff2\070\ufff2\071" +
    "\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\100\ufff2" +
    "\001\002\000\054\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\030\ufff4\054\ufff4\062\ufff4\063\ufff4\064\ufff4" +
    "\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074" +
    "\ufff4\075\ufff4\076\ufff4\100\ufff4\001\002\000\016\004\004" +
    "\005\007\006\012\007\033\010\011\054\155\001\002\000" +
    "\004\013\172\001\002\000\030\011\046\012\053\017\045" +
    "\022\052\045\042\054\041\055\050\056\044\057\047\060" +
    "\043\077\054\001\002\000\030\011\046\012\053\017\045" +
    "\022\052\045\042\054\041\055\050\056\044\057\047\060" +
    "\043\077\054\001\002\000\040\014\161\016\075\017\065" +
    "\020\071\021\060\032\057\035\073\036\074\037\064\040" +
    "\066\041\061\042\063\043\067\044\062\046\070\001\002" +
    "\000\030\011\046\012\053\017\045\022\052\045\042\054" +
    "\162\055\050\056\044\057\047\060\043\077\054\001\002" +
    "\000\046\013\172\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023" +
    "\uffd4\032\uffd4\033\142\034\143\035\uffd4\036\uffd4\037\uffd4" +
    "\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\046\uffd4\001" +
    "\002\000\004\023\166\001\002\000\004\023\uffb8\001\002" +
    "\000\040\016\075\017\065\020\071\021\060\023\uffb9\032" +
    "\057\035\073\036\074\037\064\040\066\041\061\042\063" +
    "\043\067\044\062\046\070\001\002\000\004\027\167\001" +
    "\002\000\044\004\004\005\007\006\012\007\033\010\011" +
    "\054\024\062\036\063\022\064\025\066\006\067\032\070" +
    "\035\071\037\074\027\075\031\076\010\100\020\001\002" +
    "\000\046\004\004\005\007\006\012\007\033\010\011\030" +
    "\171\054\024\062\036\063\022\064\025\066\006\067\032" +
    "\070\035\071\037\074\027\075\031\076\010\100\020\001" +
    "\002\000\054\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb" +
    "\010\uffbb\030\uffbb\054\uffbb\062\uffbb\063\uffbb\064\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\100\uffbb\001\002\000\030\011\046\012" +
    "\053\017\045\022\052\045\042\054\041\055\050\056\044" +
    "\057\047\060\043\077\054\001\002\000\040\014\174\016" +
    "\075\017\065\020\071\021\060\032\057\035\073\036\074" +
    "\037\064\040\066\041\061\042\063\043\067\044\062\046" +
    "\070\001\002\000\102\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\017\uffed\022\uffed\023" +
    "\uffed\030\uffed\045\uffed\054\uffed\055\uffed\056\uffed\057\uffed" +
    "\060\uffed\062\uffed\063\uffed\064\uffed\066\uffed\067\uffed\070" +
    "\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed\076\uffed" +
    "\077\uffed\100\uffed\001\002\000\040\014\176\016\075\017" +
    "\065\020\071\021\060\032\057\035\073\036\074\037\064" +
    "\040\066\041\061\042\063\043\067\044\062\046\070\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\162\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\004\023\200\001\002\000\004\027\201\001\002" +
    "\000\044\004\004\005\007\006\012\007\033\010\011\054" +
    "\024\062\036\063\022\064\025\066\006\067\032\070\035" +
    "\071\037\074\027\075\031\076\010\100\020\001\002\000" +
    "\046\004\004\005\007\006\012\007\033\010\011\030\203" +
    "\054\024\062\036\063\022\064\025\066\006\067\032\070" +
    "\035\071\037\074\027\075\031\076\010\100\020\001\002" +
    "\000\054\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\030\uffba\054\uffba\062\uffba\063\uffba\064\uffba\066\uffba" +
    "\067\uffba\070\uffba\071\uffba\072\uffba\073\uffba\074\uffba\075" +
    "\uffba\076\uffba\100\uffba\001\002\000\010\013\206\014\207" +
    "\015\210\001\002\000\010\013\uffe4\014\uffe4\015\uffe4\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\041\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\100\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\017\uffeb\022\uffeb\030\uffeb\045" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\062\uffeb" +
    "\063\uffeb\064\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb\072" +
    "\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb" +
    "\001\002\000\004\054\211\001\002\000\010\013\uffe5\014" +
    "\uffe5\015\uffe5\001\002\000\040\014\213\016\075\017\065" +
    "\020\071\021\060\032\057\035\073\036\074\037\064\040" +
    "\066\041\061\042\063\043\067\044\062\046\070\001\002" +
    "\000\100\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\012\uffec\017\uffec\022\uffec\030\uffec\045\uffec" +
    "\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\062\uffec\063" +
    "\uffec\064\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\001" +
    "\002\000\044\004\004\005\007\006\012\007\033\010\011" +
    "\054\024\062\036\063\022\064\025\066\006\067\032\070" +
    "\035\071\037\074\027\075\031\076\010\100\020\001\002" +
    "\000\046\004\004\005\007\006\012\007\033\010\011\030" +
    "\216\054\024\062\036\063\022\064\025\066\006\067\032" +
    "\070\035\071\037\074\027\075\031\076\010\100\020\001" +
    "\002\000\004\063\217\001\002\000\004\022\220\001\002" +
    "\000\030\011\046\012\053\017\045\022\052\045\042\054" +
    "\041\055\050\056\044\057\047\060\043\077\054\001\002" +
    "\000\040\016\075\017\065\020\071\021\060\023\222\032" +
    "\057\035\073\036\074\037\064\040\066\041\061\042\063" +
    "\043\067\044\062\046\070\001\002\000\004\014\223\001" +
    "\002\000\054\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\030\uffbc\054\uffbc\062\uffbc\063\uffbc\064\uffbc\066" +
    "\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc" +
    "\075\uffbc\076\uffbc\100\uffbc\001\002\000\030\011\046\012" +
    "\053\017\045\022\052\045\042\054\041\055\050\056\044" +
    "\057\047\060\043\077\054\001\002\000\040\016\075\017" +
    "\065\020\071\021\060\023\226\032\057\035\073\036\074" +
    "\037\064\040\066\041\061\042\063\043\067\044\062\046" +
    "\070\001\002\000\004\027\227\001\002\000\044\004\004" +
    "\005\007\006\012\007\033\010\011\054\024\062\036\063" +
    "\022\064\025\066\006\067\032\070\035\071\037\074\027" +
    "\075\031\076\010\100\020\001\002\000\046\004\004\005" +
    "\007\006\012\007\033\010\011\030\231\054\024\062\036" +
    "\063\022\064\025\066\006\067\032\070\035\071\037\074" +
    "\027\075\031\076\010\100\020\001\002\000\056\002\uffc7" +
    "\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\030\uffc7\054" +
    "\uffc7\062\uffc7\063\uffc7\064\uffc7\065\232\066\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076" +
    "\uffc7\100\uffc7\001\002\000\006\027\250\064\247\001\002" +
    "\000\056\002\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\030\uffc5\054\uffc5\062\uffc5\063\uffc5\064\uffc5\065\234" +
    "\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072\uffc5\073\uffc5\074" +
    "\uffc5\075\uffc5\076\uffc5\100\uffc5\001\002\000\006\027\236" +
    "\064\235\001\002\000\004\022\241\001\002\000\044\004" +
    "\004\005\007\006\012\007\033\010\011\054\024\062\036" +
    "\063\022\064\025\066\006\067\032\070\035\071\037\074" +
    "\027\075\031\076\010\100\020\001\002\000\046\004\004" +
    "\005\007\006\012\007\033\010\011\030\240\054\024\062" +
    "\036\063\022\064\025\066\006\067\032\070\035\071\037" +
    "\074\027\075\031\076\010\100\020\001\002\000\054\002" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\030\uffc4" +
    "\054\uffc4\062\uffc4\063\uffc4\064\uffc4\066\uffc4\067\uffc4\070" +
    "\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4" +
    "\100\uffc4\001\002\000\030\011\046\012\053\017\045\022" +
    "\052\045\042\054\041\055\050\056\044\057\047\060\043" +
    "\077\054\001\002\000\040\016\075\017\065\020\071\021" +
    "\060\023\243\032\057\035\073\036\074\037\064\040\066" +
    "\041\061\042\063\043\067\044\062\046\070\001\002\000" +
    "\004\027\244\001\002\000\044\004\004\005\007\006\012" +
    "\007\033\010\011\054\024\062\036\063\022\064\025\066" +
    "\006\067\032\070\035\071\037\074\027\075\031\076\010" +
    "\100\020\001\002\000\046\004\004\005\007\006\012\007" +
    "\033\010\011\030\246\054\024\062\036\063\022\064\025" +
    "\066\006\067\032\070\035\071\037\074\027\075\031\076" +
    "\010\100\020\001\002\000\056\002\uffc3\004\uffc3\005\uffc3" +
    "\006\uffc3\007\uffc3\010\uffc3\030\uffc3\054\uffc3\062\uffc3\063" +
    "\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\100\uffc3\001" +
    "\002\000\004\022\253\001\002\000\044\004\004\005\007" +
    "\006\012\007\033\010\011\054\024\062\036\063\022\064" +
    "\025\066\006\067\032\070\035\071\037\074\027\075\031" +
    "\076\010\100\020\001\002\000\046\004\004\005\007\006" +
    "\012\007\033\010\011\030\252\054\024\062\036\063\022" +
    "\064\025\066\006\067\032\070\035\071\037\074\027\075" +
    "\031\076\010\100\020\001\002\000\054\002\uffc6\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\030\uffc6\054\uffc6\062" +
    "\uffc6\063\uffc6\064\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6" +
    "\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\100\uffc6\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\041\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\040\016\075\017\065\020\071\021\060\023\255" +
    "\032\057\035\073\036\074\037\064\040\066\041\061\042" +
    "\063\043\067\044\062\046\070\001\002\000\004\027\256" +
    "\001\002\000\044\004\004\005\007\006\012\007\033\010" +
    "\011\054\024\062\036\063\022\064\025\066\006\067\032" +
    "\070\035\071\037\074\027\075\031\076\010\100\020\001" +
    "\002\000\046\004\004\005\007\006\012\007\033\010\011" +
    "\030\260\054\024\062\036\063\022\064\025\066\006\067" +
    "\032\070\035\071\037\074\027\075\031\076\010\100\020" +
    "\001\002\000\056\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\030\uffc2\054\uffc2\062\uffc2\063\uffc2\064\uffc2" +
    "\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\001\002\000\004" +
    "\014\264\001\002\000\004\014\263\001\002\000\054\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\030\ufff6" +
    "\054\ufff6\062\ufff6\063\ufff6\064\ufff6\066\ufff6\067\ufff6\070" +
    "\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6\076\ufff6" +
    "\100\ufff6\001\002\000\054\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\030\ufff5\054\ufff5\062\ufff5\063\ufff5" +
    "\064\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5\073" +
    "\ufff5\074\ufff5\075\ufff5\076\ufff5\100\ufff5\001\002\000\030" +
    "\011\046\012\053\017\045\022\052\045\042\054\041\055" +
    "\050\056\044\057\047\060\043\077\054\001\002\000\040" +
    "\016\075\017\065\020\071\021\060\023\267\032\057\035" +
    "\073\036\074\037\064\040\066\041\061\042\063\043\067" +
    "\044\062\046\070\001\002\000\004\027\270\001\002\000" +
    "\044\004\004\005\007\006\012\007\033\010\011\054\024" +
    "\062\036\063\022\064\025\066\006\067\032\070\035\071" +
    "\037\074\027\075\031\076\010\100\020\001\002\000\046" +
    "\004\004\005\007\006\012\007\033\010\011\030\272\054" +
    "\024\062\036\063\022\064\025\066\006\067\032\070\035" +
    "\071\037\074\027\075\031\076\010\100\020\001\002\000" +
    "\054\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\030\ufff9\054\ufff9\062\ufff9\063\ufff9\064\ufff9\066\ufff9\067" +
    "\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9" +
    "\076\ufff9\100\ufff9\001\002\000\030\011\046\012\053\017" +
    "\045\022\052\045\042\054\041\055\050\056\044\057\047" +
    "\060\043\077\054\001\002\000\040\015\275\016\075\017" +
    "\065\020\071\021\060\032\057\035\073\036\074\037\064" +
    "\040\066\041\061\042\063\043\067\044\062\046\070\001" +
    "\002\000\030\011\046\012\053\017\045\022\052\045\042" +
    "\054\041\055\050\056\044\057\047\060\043\077\054\001" +
    "\002\000\040\016\075\017\065\020\071\021\060\023\277" +
    "\032\057\035\073\036\074\037\064\040\066\041\061\042" +
    "\063\043\067\044\062\046\070\001\002\000\004\014\300" +
    "\001\002\000\054\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007" +
    "\uffb6\010\uffb6\030\uffb6\054\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\066\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074" +
    "\uffb6\075\uffb6\076\uffb6\100\uffb6\001\002\000\004\002\001" +
    "\001\002\000\030\011\046\012\053\017\045\022\052\045" +
    "\042\054\041\055\050\056\044\057\047\060\043\077\054" +
    "\001\002\000\040\016\075\017\065\020\071\021\060\023" +
    "\304\032\057\035\073\036\074\037\064\040\066\041\061" +
    "\042\063\043\067\044\062\046\070\001\002\000\004\014" +
    "\305\001\002\000\054\002\ufffa\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\030\ufffa\054\ufffa\062\ufffa\063\ufffa\064" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\100\ufffa\001\002\000\054\002" +
    "\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\030\ufff7" +
    "\054\ufff7\062\ufff7\063\ufff7\064\ufff7\066\ufff7\067\ufff7\070" +
    "\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7" +
    "\100\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\030\002\012\003\013\004\020\005\004\007" +
    "\014\010\027\015\016\016\015\017\022\020\033\021\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\013\004\020\005\112\010\027\015\016\016\015" +
    "\017\022\020\033\021\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\150\013\050\014\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\054\013\050\014\055\001\001\000\002\001\001\000\010" +
    "\012\140\013\050\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\137\013\050\014\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\135\013\050\014\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\131\013\050\014\055\001\001" +
    "\000\010\012\130\013\050\014\055\001\001\000\010\012" +
    "\127\013\050\014\055\001\001\000\010\012\126\013\050" +
    "\014\055\001\001\000\010\012\125\013\050\014\055\001" +
    "\001\000\010\012\124\013\050\014\055\001\001\000\010" +
    "\012\123\013\050\014\055\001\001\000\010\012\122\013" +
    "\050\014\055\001\001\000\010\012\121\013\050\014\055" +
    "\001\001\000\010\012\116\013\050\014\055\001\001\000" +
    "\010\012\115\013\050\014\055\001\001\000\002\001\001" +
    "\000\010\012\077\013\050\014\055\001\001\000\010\012" +
    "\076\013\050\014\055\001\001\000\010\012\075\013\050" +
    "\014\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\103\024\104\001\001\000\002" +
    "\001\001\000\010\012\107\013\050\014\055\001\001\000" +
    "\004\024\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\013\004" +
    "\020\005\004\007\111\010\027\015\016\016\015\017\022" +
    "\020\033\021\025\001\001\000\024\003\013\004\020\005" +
    "\112\010\027\015\016\016\015\017\022\020\033\021\025" +
    "\001\001\000\002\001\001\000\026\003\013\004\020\005" +
    "\004\007\114\010\027\015\016\016\015\017\022\020\033" +
    "\021\025\001\001\000\024\003\013\004\020\005\112\010" +
    "\027\015\016\016\015\017\022\020\033\021\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\120\013" +
    "\050\014\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\133\013\050\014" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\144" +
    "\013\050\014\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\155\004" +
    "\156\010\027\001\001\000\002\001\001\000\010\012\174" +
    "\013\050\014\055\001\001\000\010\012\157\013\050\014" +
    "\055\001\001\000\002\001\001\000\014\004\163\006\162" +
    "\012\164\013\050\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\013\004\020\005\004\007\167\010" +
    "\027\015\016\016\015\017\022\020\033\021\025\001\001" +
    "\000\024\003\013\004\020\005\112\010\027\015\016\016" +
    "\015\017\022\020\033\021\025\001\001\000\002\001\001" +
    "\000\010\012\172\013\050\014\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\163" +
    "\006\176\012\164\013\050\014\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\013\004\020\005\004" +
    "\007\201\010\027\015\016\016\015\017\022\020\033\021" +
    "\025\001\001\000\024\003\013\004\020\005\112\010\027" +
    "\015\016\016\015\017\022\020\033\021\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\211\013\050\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\013\004\020\005\004\007\214\010" +
    "\027\015\016\016\015\017\022\020\033\021\025\001\001" +
    "\000\024\003\013\004\020\005\112\010\027\015\016\016" +
    "\015\017\022\020\033\021\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\220\013\050\014\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\012\224\013\050\014\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\013\004\020\005\004" +
    "\007\227\010\027\015\016\016\015\017\022\020\033\021" +
    "\025\001\001\000\024\003\013\004\020\005\112\010\027" +
    "\015\016\016\015\017\022\020\033\021\025\001\001\000" +
    "\004\022\232\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\013\004" +
    "\020\005\004\007\236\010\027\015\016\016\015\017\022" +
    "\020\033\021\025\001\001\000\024\003\013\004\020\005" +
    "\112\010\027\015\016\016\015\017\022\020\033\021\025" +
    "\001\001\000\002\001\001\000\010\012\241\013\050\014" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\013\004\020\005\004\007\244\010\027\015\016\016" +
    "\015\017\022\020\033\021\025\001\001\000\024\003\013" +
    "\004\020\005\112\010\027\015\016\016\015\017\022\020" +
    "\033\021\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\013\004\020\005\004\007\250\010\027\015" +
    "\016\016\015\017\022\020\033\021\025\001\001\000\024" +
    "\003\013\004\020\005\112\010\027\015\016\016\015\017" +
    "\022\020\033\021\025\001\001\000\002\001\001\000\010" +
    "\012\253\013\050\014\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\013\004\020\005\004\007\256" +
    "\010\027\015\016\016\015\017\022\020\033\021\025\001" +
    "\001\000\024\003\013\004\020\005\112\010\027\015\016" +
    "\016\015\017\022\020\033\021\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\265\013\050\014\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\013" +
    "\004\020\005\004\007\270\010\027\015\016\016\015\017" +
    "\022\020\033\021\025\001\001\000\024\003\013\004\020" +
    "\005\112\010\027\015\016\016\015\017\022\020\033\021" +
    "\025\001\001\000\002\001\001\000\010\012\273\013\050" +
    "\014\055\001\001\000\002\001\001\000\010\012\275\013" +
    "\050\014\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\302\013" +
    "\050\014\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  
    LinkedList<Nodo> arbol;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);
    }

    public LinkedList<Nodo> getAST(){
        return arbol;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {





  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 parser.arbol=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= DECLARACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= rprintln parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Println(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= rprint parizq EXP parder ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Print(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= rwhile parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Nodo RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new While(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= rbreak ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Break(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= id menosmenos ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= id masmas ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= rcontinue ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Continue(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= rreturn ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= rreturn EXP ptocoma 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Return(aright,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= DO_WHILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= FOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= WRITE_FILE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ASIGNACION ::= id igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Asignacion(aright,new Identificador(aright,a),b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNACION",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= TIPO_VAR L_VARIABLES igual EXP ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= TIPO_VAR L_VARIABLES ptocoma 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<String> b = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Declaracion(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPO_VAR ::= rint 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.INT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPO_VAR ::= rdouble 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.DOUBLE); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPO_VAR ::= rchar 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.CHAR); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPO_VAR ::= rboolean 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.BOOLEAN); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPO_VAR ::= rstring 
            {
              Tipo RESULT =null;
		 RESULT=new Tipo(Simbolo.TipoS.STRING); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // L_VARIABLES ::= L_VARIABLES coma id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<String> a = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // L_VARIABLES ::= id 
            {
              LinkedList<String> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_VARIABLES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EXP ::= menos EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(bright,a,Operacion.TipoO.NEGATIVO); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EXP ::= EXP mas EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.SUMA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // EXP ::= EXP menos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.RESTA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EXP ::= EXP por EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.MULTIPLICACION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EXP ::= EXP div EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.DIVISION,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXP ::= EXP potencia EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Aritmetica(cright,a,Operacion.TipoO.POTENCIA,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= EXP menque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP mayque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP mayigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MAYIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP menigualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.MENIGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP igualque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.IGUALQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP difque EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Relacional(cright,a,Operacion.TipoO.DIFQUE,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP and EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.AND,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= EXP or EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(cright,a,Operacion.TipoO.OR,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= not EXP 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Logica(bright,a,Operacion.TipoO.NOT); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= id 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Identificador(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= numero 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Integer.parseInt(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= decimal 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,Double.parseDouble(a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= cadena 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= caracter 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,a.charAt(1)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= rtrue 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= rfalse 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Literal(aright,false); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= TERNARIO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= parizq EXP parder 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= id menosmenos 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Decremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= id masmas 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Incremento(aright,new Identificador(aright,a)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= READ_FILE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TERNARIO ::= EXP pregunta EXP dosptos EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Ternario(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERNARIO",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(dright,a,b,new If(eright,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF 
            {
              Instruccion RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new If(dright,a,b,c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= rif parizq EXP parder llavizq INSTRUCCIONES llavder L_ELSE_IF relse llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		LinkedList<If> c = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new If(eright,a,b,c,new If(fright,d)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // L_ELSE_IF ::= L_ELSE_IF relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		LinkedList<If> a = (LinkedList<If>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=a; RESULT.add(new If(dright,b,c)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // L_ELSE_IF ::= relse rif parizq EXP parder llavizq INSTRUCCIONES llavder 
            {
              LinkedList<If> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new LinkedList<>(); RESULT.add(new If(cright,a,b)); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("L_ELSE_IF",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCH ::= rswitch parizq EXP parder llavizq BLOQUE_SWITCH llavder 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> b = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new Switch(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SWITCH",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BLOQUE_SWITCH ::= BLOQUE_SWITCH CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Case> a = (LinkedList<Case>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case b = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; RESULT.add(b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BLOQUE_SWITCH ::= CASO_SWITCH 
            {
              LinkedList<Case> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Case a = (Case)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new LinkedList<>(); RESULT.add(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BLOQUE_SWITCH",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CASO_SWITCH ::= rcase EXP dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CASO_SWITCH ::= rdefault dosptos INSTRUCCIONES 
            {
              Case RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=new Case(bright,a,true); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASO_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DO_WHILE ::= rdo llavizq INSTRUCCIONES llavder rwhile parizq EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new DoWhile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= rfor parizq ASIGNACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= rfor parizq DECLARACION EXP ptocoma CAMBIO_FOR parder llavizq INSTRUCCIONES llavder 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> d = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new For(eright,a,b,c,d); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CAMBIO_FOR ::= EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CAMBIO_FOR ::= ASIGNACION 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT=a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CAMBIO_FOR",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // READ_FILE ::= rreadfile parizq EXP parder 
            {
              Expresion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT=new ReadFile(bright,a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("READ_FILE",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WRITE_FILE ::= rwritefile parizq EXP coma EXP parder ptocoma 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT=new WriteFile(cright,a,b); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WRITE_FILE",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
