/* The following code was generated by JFlex 1.6.1 */

/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Paquete, importaciones

package Analizadores;

import java_cup.runtime.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/Analizadores/Lexico.jflex</tt>
 */
public class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMENT_SIMPLE = 2;
  public static final int COMENT_MULTI = 4;
  public static final int CADENA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  8, 10,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9, 49, 11,  0,  0, 53, 50,  5, 39, 40,  7, 37, 36, 38,  2,  6, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 45, 35, 48, 34, 47, 52, 
     0, 24, 19, 22, 16, 21, 29, 28, 23, 13,  3, 33, 20,  3, 14, 17, 
    30,  3, 25, 27, 15, 18,  3, 31,  3,  3,  3, 41,  0, 42, 46,  4, 
     0, 24, 19, 22, 16, 21, 29, 28, 23, 13,  3, 33, 20,  3, 14, 17, 
    30,  3, 25, 27, 15, 18,  3, 31,  3,  3,  3, 43, 51, 44,  0,  0, 
     0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\1\7\4\1\1\4\4\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\2\1\1\32"+
    "\1\33\2\34\1\35\1\34\2\36\1\37\1\40\1\0"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\4\1\45"+
    "\2\4\1\46\10\4\2\0\10\4\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\2\62\1\0\10\4\1\0\3\4\1\0\3\4\1\63"+
    "\1\0\1\63\1\4\1\64\1\4\1\65\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\3\4\1\66\4\4"+
    "\2\67\1\4\1\70\2\71\2\4\2\0\2\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\2\72"+
    "\5\4\2\73\1\0\3\4\2\0\2\4\2\74\2\75"+
    "\2\76\1\0\2\4\1\77\1\100\2\4\1\0\1\4"+
    "\1\101\1\4\1\102\1\103\1\102\1\103\1\0\1\4"+
    "\1\0\2\4\1\104\1\105\1\0\1\4\1\0\1\4"+
    "\2\106\1\0\1\4\1\107\2\110\1\0\1\4\1\0"+
    "\1\4\2\111\1\0\1\4\2\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\330\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\330\0\330\0\u021c\0\u0252\0\u0288"+
    "\0\u02be\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\330\0\330\0\u0510\0\u0546\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\330\0\330\0\330\0\u068a"+
    "\0\330\0\u06c0\0\330\0\u068a\0\330\0\u06f6\0\u072c\0\330"+
    "\0\330\0\330\0\330\0\u0762\0\330\0\u0798\0\u0144\0\u07ce"+
    "\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e"+
    "\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e"+
    "\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\330\0\330\0\330\0\330"+
    "\0\330\0\330\0\330\0\330\0\330\0\330\0\330\0\330"+
    "\0\u0144\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u0144\0\u10aa"+
    "\0\u0144\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224"+
    "\0\u125a\0\u1290\0\u12c6\0\u0144\0\u12fc\0\u1332\0\u1368\0\u139e"+
    "\0\330\0\u0144\0\u13d4\0\u0144\0\330\0\u0144\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u1626\0\u165c\0\u1692\0\u16c8\0\330\0\u0144\0\u16fe\0\u1734"+
    "\0\u176a\0\u17a0\0\u17d6\0\330\0\u0144\0\u180c\0\u1842\0\u1878"+
    "\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\330\0\u0144\0\u19bc"+
    "\0\u19f2\0\330\0\u0144\0\u1a28\0\u1a5e\0\u1a94\0\u0144\0\u0144"+
    "\0\u1aca\0\u1b00\0\u1b36\0\u1b6c\0\u0144\0\u1ba2\0\330\0\330"+
    "\0\u0144\0\u0144\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u0144"+
    "\0\u0144\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\330\0\u0144\0\u1dbe"+
    "\0\u1df4\0\u0144\0\330\0\u0144\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\330\0\u0144\0\u1f02\0\u1f38\0\330\0\u0144";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\2\10\1\11\1\12\1\13\2\14"+
    "\1\0\1\15\1\16\1\17\1\10\1\20\1\21\2\10"+
    "\1\22\1\10\1\23\1\24\2\10\1\25\1\26\1\27"+
    "\1\10\1\30\1\31\1\32\1\5\1\10\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\6\57\1\60\1\57\1\61\63\57\1\60"+
    "\1\62\2\57\1\0\53\57\6\63\1\64\4\63\1\65"+
    "\52\63\67\0\1\6\1\66\64\0\1\10\1\0\2\10"+
    "\10\0\15\10\1\0\5\10\1\0\1\10\25\0\1\67"+
    "\1\0\1\67\11\0\15\67\1\0\5\67\1\0\1\67"+
    "\32\0\1\70\1\71\32\0\1\72\65\0\1\73\41\0"+
    "\1\74\16\0\1\75\31\0\1\10\1\0\2\10\10\0"+
    "\1\10\1\76\13\10\1\0\2\10\1\77\2\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\4\10\1\100"+
    "\7\10\1\101\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\4\10\1\102\3\10\1\103\4\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\4\10\1\104\7\10\1\105\1\0\5\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\7\10\1\106"+
    "\5\10\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\4\10\1\107\5\10\1\110\1\111\1\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\10\10\1\112\4\10\1\0\5\10\1\0\1\10"+
    "\43\0\1\113\17\0\1\114\27\0\1\10\1\0\2\10"+
    "\10\0\2\10\1\115\12\10\1\0\4\10\1\116\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\4\10\1\117"+
    "\6\10\1\120\1\10\1\0\5\10\1\0\1\10\25\0"+
    "\1\10\1\0\2\10\10\0\4\10\1\121\7\10\1\122"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\12\10\1\123\1\10\1\124\1\0\5\10\1\0"+
    "\1\10\66\0\1\125\65\0\1\126\2\0\1\127\62\0"+
    "\1\130\3\0\1\131\61\0\1\132\65\0\1\133\65\0"+
    "\1\134\105\0\1\135\66\0\1\136\10\0\1\70\65\0"+
    "\1\61\60\0\1\66\71\0\1\137\77\0\1\140\47\0"+
    "\1\10\1\0\2\10\10\0\2\10\1\141\12\10\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\7\0"+
    "\1\142\1\143\2\10\1\144\5\10\1\145\3\10\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\10\0"+
    "\5\10\1\146\7\10\1\0\5\10\1\0\1\10\25\0"+
    "\1\10\1\0\2\10\10\0\5\10\1\147\7\10\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\10\0"+
    "\15\10\1\0\2\10\1\150\2\10\1\0\1\10\25\0"+
    "\1\10\1\0\2\10\10\0\4\10\1\151\10\10\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\10\0"+
    "\10\10\1\152\4\10\1\0\5\10\1\0\1\10\25\0"+
    "\1\10\1\0\2\10\10\0\15\10\1\153\1\154\4\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\1\10"+
    "\1\155\13\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\13\10\1\156\1\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\15\10"+
    "\1\157\1\160\4\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\2\10\1\161\10\10\1\162\1\10\1\0"+
    "\5\10\1\0\1\10\55\0\1\163\50\0\2\164\51\0"+
    "\1\10\1\0\2\10\10\0\14\10\1\165\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\7\0\1\164"+
    "\1\166\14\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\14\10\1\167\1\0\5\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\7\10\1\170"+
    "\5\10\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\15\10\1\0\4\10\1\171\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\7\0\1\172\1\173\14\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\7\0\1\174\1\175\14\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\7\0\1\176\1\177\14\10"+
    "\1\0\5\10\1\0\1\10\42\0\1\200\50\0\1\10"+
    "\1\0\2\10\10\0\1\10\1\201\13\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\4\10"+
    "\1\202\10\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\12\10\1\203\2\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\10\10"+
    "\1\204\4\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\6\10\1\205\6\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\13\10"+
    "\1\206\1\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\7\10\1\207\5\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\13\10"+
    "\1\210\1\10\1\0\5\10\1\0\1\10\51\0\1\211"+
    "\41\0\1\10\1\0\2\10\10\0\10\10\1\212\4\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\2\10\1\213\12\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\14\10\1\214\1\0"+
    "\5\10\1\0\1\10\51\0\1\215\41\0\1\10\1\0"+
    "\2\10\10\0\10\10\1\216\4\10\1\0\5\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\5\10\1\217"+
    "\7\10\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\3\10\1\220\11\10\1\0\5\10\1\0"+
    "\1\10\40\0\2\221\67\0\1\222\47\0\1\10\1\0"+
    "\2\10\7\0\1\221\1\223\14\10\1\0\5\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\2\10\1\224"+
    "\12\10\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\15\10\1\225\1\226\4\10\1\0\1\10"+
    "\42\0\1\227\50\0\1\10\1\0\2\10\10\0\1\10"+
    "\1\230\13\10\1\0\5\10\1\0\1\10\50\0\1\231"+
    "\42\0\1\10\1\0\2\10\10\0\7\10\1\232\5\10"+
    "\1\0\5\10\1\0\1\10\43\0\1\233\47\0\1\10"+
    "\1\0\2\10\10\0\2\10\1\234\12\10\1\0\5\10"+
    "\1\0\1\10\43\0\1\235\47\0\1\10\1\0\2\10"+
    "\10\0\2\10\1\236\12\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\5\10\1\237\7\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\13\10\1\240\1\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\7\10\1\241\5\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\5\10\1\242\7\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\10\10\1\243\4\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\15\10\1\0\5\10\1\244\1\245\25\0\1\10"+
    "\1\0\2\10\7\0\1\246\1\247\14\10\1\0\5\10"+
    "\1\0\1\10\25\0\1\10\1\0\2\10\10\0\14\10"+
    "\1\250\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\1\10\1\251\10\0\15\10\1\0\5\10\1\0\1\10"+
    "\42\0\1\252\75\0\1\253\40\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\254\13\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\11\10\1\255\3\10"+
    "\1\0\5\10\1\0\1\10\51\0\1\256\41\0\1\10"+
    "\1\0\2\10\10\0\10\10\1\257\4\10\1\0\5\10"+
    "\1\0\1\10\43\0\1\260\47\0\1\10\1\0\2\10"+
    "\10\0\2\10\1\261\12\10\1\0\5\10\1\0\1\10"+
    "\51\0\1\262\41\0\1\10\1\0\2\10\10\0\10\10"+
    "\1\263\4\10\1\0\5\10\1\0\1\10\51\0\1\264"+
    "\41\0\1\10\1\0\2\10\10\0\10\10\1\265\4\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\6\10\1\266\6\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\14\10\1\267\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\10\0"+
    "\10\10\1\270\4\10\1\0\5\10\1\0\1\10\25\0"+
    "\1\10\1\0\2\10\10\0\7\10\1\271\5\10\1\0"+
    "\5\10\1\0\1\10\25\0\1\10\1\0\2\10\10\0"+
    "\13\10\1\272\1\10\1\0\5\10\1\0\1\10\42\0"+
    "\1\273\50\0\1\10\1\0\2\10\10\0\1\10\1\274"+
    "\13\10\1\0\5\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\1\10\1\275\13\10\1\0\5\10\1\0"+
    "\1\10\25\0\1\10\1\0\2\10\10\0\15\10\1\0"+
    "\2\10\1\276\2\10\1\0\1\10\60\0\1\277\60\0"+
    "\1\300\37\0\1\10\1\0\2\10\10\0\15\10\1\0"+
    "\1\10\1\301\3\10\1\0\1\10\25\0\1\10\1\0"+
    "\2\10\10\0\12\10\1\302\2\10\1\0\5\10\1\0"+
    "\1\10\50\0\1\303\42\0\1\10\1\0\2\10\10\0"+
    "\7\10\1\304\5\10\1\0\5\10\1\0\1\10\30\0"+
    "\1\305\62\0\1\10\1\0\1\10\1\306\10\0\15\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\7\10\1\307\5\10\1\0\5\10\1\0\1\10"+
    "\25\0\1\10\1\0\2\10\10\0\2\10\1\310\12\10"+
    "\1\0\5\10\1\0\1\10\25\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\311\13\10\1\0\5\10\1\0\1\10"+
    "\46\0\1\312\44\0\1\10\1\0\2\10\10\0\5\10"+
    "\1\313\7\10\1\0\5\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\7\0\1\314\1\315\14\10\1\0\5\10"+
    "\1\0\1\10\42\0\1\316\50\0\1\10\1\0\2\10"+
    "\10\0\1\10\1\317\13\10\1\0\5\10\1\0\1\10"+
    "\61\0\1\320\31\0\1\10\1\0\2\10\10\0\15\10"+
    "\1\0\2\10\1\321\2\10\1\0\1\10\25\0\1\10"+
    "\1\0\2\10\10\0\10\10\1\322\4\10\1\0\5\10"+
    "\1\0\1\10\51\0\1\323\41\0\1\10\1\0\2\10"+
    "\10\0\10\10\1\324\4\10\1\0\5\10\1\0\1\10"+
    "\50\0\1\325\42\0\1\10\1\0\2\10\10\0\7\10"+
    "\1\326\5\10\1\0\5\10\1\0\1\10\40\0\2\327"+
    "\51\0\1\10\1\0\2\10\7\0\1\327\1\330\14\10"+
    "\1\0\5\10\1\0\1\10\51\0\1\331\41\0\1\10"+
    "\1\0\2\10\10\0\10\10\1\332\4\10\1\0\5\10"+
    "\1\0\1\10\50\0\1\333\42\0\1\10\1\0\2\10"+
    "\10\0\7\10\1\334\5\10\1\0\5\10\1\0\1\10"+
    "\51\0\1\335\41\0\1\10\1\0\2\10\10\0\10\10"+
    "\1\336\4\10\1\0\5\10\1\0\1\10\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8046];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\4\1\2\11\16\1\2\11"+
    "\2\1\10\11\5\1\3\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\0\4\11\1\0\1\11\15\1"+
    "\2\0\10\1\14\11\1\1\1\0\10\1\1\0\3\1"+
    "\1\0\4\1\1\0\5\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\10\1\1\11\3\1\1\11\3\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\6\1\1\11\1\1\1\0\3\1"+
    "\2\0\2\1\1\11\3\1\1\11\1\1\1\0\6\1"+
    "\1\0\3\1\2\11\2\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\11\1\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"]");
            }
          case 75: break;
          case 2: 
            { return new Symbol(Simbolos.numero, yycolumn, yyline, yytext());
            }
          case 76: break;
          case 3: 
            { return new Symbol(Simbolos.punto, yycolumn, yyline, yytext());
            }
          case 77: break;
          case 4: 
            { return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 78: break;
          case 5: 
            { return new Symbol(Simbolos.comilla, yycolumn, yyline, yytext());
            }
          case 79: break;
          case 6: 
            { return new Symbol(Simbolos.div, yycolumn, yyline, yytext());
            }
          case 80: break;
          case 7: 
            { return new Symbol(Simbolos.por, yycolumn, yyline, yytext());
            }
          case 81: break;
          case 8: 
            { /* ignore white space. */
            }
          case 82: break;
          case 9: 
            { yybegin(CADENA);
            }
          case 83: break;
          case 10: 
            { return new Symbol(Simbolos.igual, yycolumn, yyline, yytext());
            }
          case 84: break;
          case 11: 
            { return new Symbol(Simbolos.ptocoma, yycolumn, yyline, yytext());
            }
          case 85: break;
          case 12: 
            { return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 86: break;
          case 13: 
            { return new Symbol(Simbolos.mas, yycolumn, yyline, yytext());
            }
          case 87: break;
          case 14: 
            { return new Symbol(Simbolos.menos, yycolumn, yyline, yytext());
            }
          case 88: break;
          case 15: 
            { return new Symbol(Simbolos.parizq, yycolumn, yyline, yytext());
            }
          case 89: break;
          case 16: 
            { return new Symbol(Simbolos.parder, yycolumn, yyline, yytext());
            }
          case 90: break;
          case 17: 
            { return new Symbol(Simbolos.corizq, yycolumn, yyline, yytext());
            }
          case 91: break;
          case 18: 
            { return new Symbol(Simbolos.corder, yycolumn, yyline, yytext());
            }
          case 92: break;
          case 19: 
            { return new Symbol(Simbolos.llavizq, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 20: 
            { return new Symbol(Simbolos.llavder, yycolumn, yyline, yytext());
            }
          case 94: break;
          case 21: 
            { return new Symbol(Simbolos.dosptos, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 22: 
            { return new Symbol(Simbolos.potencia, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 23: 
            { return new Symbol(Simbolos.mayque, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 24: 
            { return new Symbol(Simbolos.menque, yycolumn, yyline, yytext());
            }
          case 98: break;
          case 25: 
            { return new Symbol(Simbolos.not, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 26: 
            { return new Symbol(Simbolos.pregunta, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 27: 
            { return new Symbol(Simbolos.porcentaje, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 28: 
            { 
            }
          case 102: break;
          case 29: 
            { yybegin(YYINITIAL);
            }
          case 103: break;
          case 30: 
            { cadena += yytext();
            }
          case 104: break;
          case 31: 
            { String temp = cadena; cadena = ""; yybegin(YYINITIAL); return new Symbol(Simbolos.cadena, yycolumn, yyline, temp);
            }
          case 105: break;
          case 32: 
            { return new Symbol(Simbolos.decimal, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 33: 
            { yybegin(COMENT_SIMPLE);
            }
          case 107: break;
          case 34: 
            { yybegin(COMENT_MULTI);
            }
          case 108: break;
          case 35: 
            { return new Symbol(Simbolos.divigual, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 36: 
            { return new Symbol(Simbolos.porigual, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 37: 
            { return new Symbol(Simbolos.rif, yycolumn, yyline, yytext());
            }
          case 111: break;
          case 38: 
            { return new Symbol(Simbolos.rdo, yycolumn, yyline, yytext());
            }
          case 112: break;
          case 39: 
            { return new Symbol(Simbolos.igualque, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 40: 
            { return new Symbol(Simbolos.masigual, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 41: 
            { return new Symbol(Simbolos.masmas, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 42: 
            { return new Symbol(Simbolos.menosigual, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 43: 
            { return new Symbol(Simbolos.menosmenos, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 44: 
            { return new Symbol(Simbolos.mayigualque, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 45: 
            { return new Symbol(Simbolos.menigualque, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 46: 
            { return new Symbol(Simbolos.difque, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 47: 
            { return new Symbol(Simbolos.and, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 48: 
            { return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 49: 
            { return new Symbol(Simbolos.caracter, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 50: 
            { return new Symbol(Simbolos.rint, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 51: 
            { return new Symbol(Simbolos.rstr, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 52: 
            { return new Symbol(Simbolos.rfor, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 53: 
            { return new Symbol(Simbolos.rpow, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 54: 
            { return new Symbol(Simbolos.rtrue, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 55: 
            { return new Symbol(Simbolos.relse, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 56: 
            { return new Symbol(Simbolos.rchar, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 57: 
            { return new Symbol(Simbolos.rcase, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 58: 
            { return new Symbol(Simbolos.rtoint, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 59: 
            { return new Symbol(Simbolos.rbreak, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 60: 
            { return new Symbol(Simbolos.rfalse, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 61: 
            { return new Symbol(Simbolos.rprint, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 62: 
            { return new Symbol(Simbolos.rwhile, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 63: 
            { return new Symbol(Simbolos.rtochar, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 64: 
            { return new Symbol(Simbolos.rdouble, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 65: 
            { return new Symbol(Simbolos.rreturn, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 66: 
            { return new Symbol(Simbolos.rstring, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 67: 
            { return new Symbol(Simbolos.rswitch, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 68: 
            { return new Symbol(Simbolos.rdefault, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 69: 
            { return new Symbol(Simbolos.rboolean, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 70: 
            { return new Symbol(Simbolos.rprintln, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 71: 
            { return new Symbol(Simbolos.rtodouble, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 72: 
            { return new Symbol(Simbolos.rcontinue, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 73: 
            { return new Symbol(Simbolos.rreadfile, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 74: 
            { return new Symbol(Simbolos.rwritefile, yycolumn, yyline, yytext());
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
